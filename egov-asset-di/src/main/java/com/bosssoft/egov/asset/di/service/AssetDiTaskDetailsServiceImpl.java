
/**
 * 福建博思软件 1997-2018 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Sun Jan 14 22:30:43 CST 2018
 */
package com.bosssoft.egov.asset.di.service;

import java.util.List;
import com.bosssoft.egov.asset.di.entity.AssetDiTaskDetails;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;
import com.bosssoft.platform.persistence.entity.Condition;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.bosssoft.egov.asset.di.service.AssetDiTaskDetailsService;
import com.bosssoft.egov.asset.di.mapper.AssetDiTaskDetailsMapper;


/**
 * 类说明: AssetDiTaskDetailsService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2018-01-14   xiedeshou　　　新建
 * </pre>
 */
@Service
public class AssetDiTaskDetailsServiceImpl implements AssetDiTaskDetailsService {

	private static Logger logger = LoggerFactory.getLogger(AssetDiTaskDetailsServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private AssetDiTaskDetailsMapper assetDiTaskDetailsMapper;
	
	/**
	 *
	 * @param assetDiTaskDetails
	 */
	public void addAssetDiTaskDetails(AssetDiTaskDetails assetDiTaskDetails)  {
		assetDiTaskDetailsMapper.insert(assetDiTaskDetails);
	}

	/**
	 *
	 * @param assetDiTaskDetails
	 */
	public void delAssetDiTaskDetails(AssetDiTaskDetails assetDiTaskDetails)  {
		assetDiTaskDetailsMapper.deleteByPrimaryKey(assetDiTaskDetails);
	}

	/**
	 *
	 * @param assetDiTaskDetails
	 */
	public void updateAssetDiTaskDetails(AssetDiTaskDetails assetDiTaskDetails)  {
		assetDiTaskDetailsMapper.updateByPrimaryKey(assetDiTaskDetails);
	}

	/**
	 *
	 * @param assetDiTaskDetails
	 * @retrun
	 */
	public List<AssetDiTaskDetails> getAssetDiTaskDetailsList(AssetDiTaskDetails assetDiTaskDetails)  {
		return assetDiTaskDetailsMapper.getAssetDiTaskDetailsList(assetDiTaskDetails.getTaskId());
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<AssetDiTaskDetails> queryAssetDiTaskDetailsPage(Searcher searcher, Page<AssetDiTaskDetails> page)  {
		return assetDiTaskDetailsMapper.queryAssetDiTaskDetailsPage(searcher, page);
	}

	@Override
	public AssetDiTaskDetails getAssetDiTaskDetails(String taskDetailsId) {
		AssetDiTaskDetails taskDetails = new AssetDiTaskDetails();
		taskDetails.setTaskMxId(taskDetailsId);
		taskDetails.setState(1);
	    return getAssetDiTaskDetails(taskDetails);	
	}

	@Override
	public AssetDiTaskDetails getAssetDiTaskDetails(AssetDiTaskDetails assetDiTaskDetails) {
		List<AssetDiTaskDetails> taskDetailsList = getAssetDiTaskDetailsList(assetDiTaskDetails);
		
		return (taskDetailsList == null || taskDetailsList.isEmpty()) ? null : taskDetailsList.get(0);	
	}

	@Override
	public List<AssetDiTaskDetails> getAssetDiTaskDetailsListByTaskId(
			String taskId) {
		AssetDiTaskDetails taskDetails = new AssetDiTaskDetails();
		taskDetails.setTaskId(taskId);;
		taskDetails.setState(1);
		return getAssetDiTaskDetailsList(taskDetails);
	}

	@Override
	public List<AssetDiTaskDetails> getTaskDetailsListByCondition(
			Condition condtion) {
		
		return assetDiTaskDetailsMapper.selectByExample(condtion);
	}


}