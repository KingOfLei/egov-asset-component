/**
 * 福建博思软件 1997-2016 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Mon Oct 17 15:29:20 CST 2016
 */
package com.bosssoft.egov.asset.user.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.bosssoft.egov.asset.activiti.entity.ActivitiCondition;
import com.bosssoft.egov.asset.activiti.entity.ActivitiParams;
import com.bosssoft.egov.asset.activiti.entity.HandleType;
import com.bosssoft.egov.asset.amc.user.api.AimsUserMainService;
import com.bosssoft.egov.asset.amc.user.common.BizStatus;
import com.bosssoft.egov.asset.amc.user.common.BusType;
import com.bosssoft.egov.asset.amc.user.common.EditStatus;
import com.bosssoft.egov.asset.amc.user.entity.AfaAuthParty;

import com.bosssoft.egov.asset.amc.user.entity.DrcAuthRule;
import com.bosssoft.egov.asset.amc.user.entity.DrcAuthRuleOrg;
import com.bosssoft.egov.asset.amc.user.model.AimsUserMain;
import com.bosssoft.egov.asset.amc.user.service.AmcUserService;
import com.bosssoft.egov.asset.attach.entity.AssetAttachItem;
import com.bosssoft.egov.asset.attach.service.AssetAttachFileService;
import com.bosssoft.egov.asset.common.idgenerator.ComponetIdGen;
import com.bosssoft.egov.asset.common.util.DateUtilsExt;
import com.bosssoft.egov.asset.common.util.StringUtilsExt;
import com.bosssoft.egov.asset.dictionary.api.AssetDictManager;
import com.bosssoft.egov.asset.dictionary.api.DictItem;
import com.bosssoft.egov.asset.log.annotations.Operation;
import com.bosssoft.egov.asset.runtime.User;
import com.bosssoft.egov.asset.runtime.web.context.AppContext;
import com.bosssoft.platform.appframe.api.entity.ApiUser;
import com.bosssoft.platform.appframe.api.entity.ApiUserOrgPos;
import com.bosssoft.platform.appframe.api.service.UserService;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;
import com.bosssoft.platform.dictionary.api.DictEntry;
import com.bosssoft.platform.dictionary.api.DictionaryManager;
import com.bosssoft.platform.runtime.exception.BusinessException;
import com.bosssoft.platform.runtime.web.binding.annotation.AjaxResponseBody;
import com.bosssoft.platform.runtime.web.response.GridData;
import com.bosssoft.platform.runtime.web.response.PageResult;
import com.bosssoft.platform.ui.tags.UIConst;

@Controller
@RequestMapping("egov/asset/amcuser")
public class AmcUserController {

	@Autowired
	private UserService afaUserService;
	
	@Autowired
	private AmcUserService amcUserService;
	
	@Autowired
	private AimsUserMainService aimsUserMainService;
	
	@Autowired
	private AssetAttachFileService attachFileService;
	
	private static Logger logger = LoggerFactory.getLogger(AmcUserController.class);
	
	/**
	 * <p>函数名称：showIndex        </p>
	 * <p>功能说明：显示列表页面
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param isNeedAudit  是否需要走审核流程参数
	 * @param model
	 * @return
	 *
	 * @date   创建时间：2017年11月17日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping(value = "showIndex.do")
	public String showIndex(String isNeedAudit, Model model){
		//从菜单url中传入一个isNeedAudit参数，并返回给前端页面
		if(!StringUtilsExt.isNotBlank(isNeedAudit)){
			isNeedAudit = "0";
		}
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("isNeedAudit", isNeedAudit);
		model.addAttribute(UIConst.UIPAGEMODEL, data);
		if("1".equals(isNeedAudit)){
			return "egov/asset/amcuser/amcuser_index_audit.ui";
		}else{
			return "egov/asset/amcuser/amcuser_index.ui";
		}
	}
	
	
	/**
	 * <p>函数名称： showModify       </p>
	 * <p>功能说明：显示修改页面
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param userCode     用户账号
	 * @param lifeState
	 * @param action       
	 * @param isNeedAudit  是否需要审核流程
	 * @param model
	 * @return
	 *
	 * @date   创建时间：2017年11月17日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping(value = "showModify.do", method = { RequestMethod.POST,
			RequestMethod.GET })
	public String showModify(String userCode, String lifeState, String action, String isNeedAudit, Model model){
		if (StringUtilsExt.isEmpty(action)) {
			throw new BusinessException("USER_ERROR_001", "当前编辑状态不存在！");
		}
		if (StringUtilsExt.isEmpty(lifeState)) {
			throw new BusinessException("USER_ERROR_001", "当前生命周期状态不存在！");
		}
		List<DrcAuthRule> drcAuthRules = amcUserService.getDrcAuthRules(userCode);
		String roleStr = "";
		if(drcAuthRules != null && drcAuthRules.size() > 0){
			for(int i = 0;i < drcAuthRules.size();i++){
				String roleCode = StringUtilsExt.convertNullToString(drcAuthRules.get(i).getRoleCode());
				String roleName = StringUtilsExt.convertNullToString(drcAuthRules.get(i).getRoleName());
				if(i != 0){
					if(roleCode != "" && roleName != ""){
						roleStr += "，" + roleCode +  '-' + roleName;
					}else{
						roleStr += roleCode + roleName;
					}
				}else{
					roleStr += roleCode +  '-' + roleName;
				}
			}
		}
		//查询用户信息
		ApiUser queryUser = new ApiUser();
		queryUser.setUserCode(userCode);
		ApiUser afaUser = amcUserService.selectApiUser(queryUser);
		
		model.addAttribute("roleStr", roleStr);
		model.addAttribute("afaUser", afaUser);
		
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("afaUser", afaUser);
		
		if("1".equalsIgnoreCase(lifeState)){//代表是来自生命周期
			data.put("curEditStatus", EditStatus.VIEW.STATUS);
		}else{
			//如果isNeedAudit 参数值为空，则将其设置为0
			if(!StringUtilsExt.isNotBlank(isNeedAudit)){
				isNeedAudit = "0";
			}
			if("1".equals(isNeedAudit)){
				//需要判断是哪种状态  返回给前端
				AimsUserMain queryUserMain = new AimsUserMain();
				AimsUserMain userMain = new AimsUserMain();
				queryUserMain.setUserCode(userCode);
				queryUserMain.setStatus(1);
				List<AimsUserMain> userMains = aimsUserMainService.select(queryUserMain);
				if(userMains != null && userMains.size() > 0){
					userMain = userMains.get(0);
					Integer bizStatus = userMain.getBizStatus();
					data.put("curEditStatus", EditStatus.getEditStatus(bizStatus, action).STATUS);
				}else{
					data.put("curEditStatus", EditStatus.getEditStatus(999999, action).STATUS);
				}
			}else{
				data.put("curEditStatus", "ONLY_EDIT");
			}
			/*else if("0".equals(isNeedAudit)){
				//返回编辑状态
				data.put("curEditStatus", "ONLY_EDIT");
			}else {
				logger.error("是否需要走审核流程参数未定义！");
				throw new BusinessException("是否需要走审核流程参数未定义！");
			}*/
			
		}
		model.addAttribute(UIConst.UIPAGEMODEL, data);
	    return "egov/asset/amcuser/amcuser_modify.ui";
	}

	
	/**
	 * <p>函数名称： showAdd       </p>
	 * <p>功能说明：用户新增页面
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param userCode    用户账号
	 * @param isNeedAudit 是否需要审核流程参数
	 * @param model
	 * @return
	 *
	 * @date   创建时间：2017年11月17日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@Operation(comment="用户管理-新增页面")
	@RequestMapping(value = "showAdd.do")
	public String showAdd(String userCode, String isNeedAudit, Model model){
		Map<String, Object> data = new HashMap<String, Object>();
		ApiUser afaUser = new ApiUser();
		Long userId = ComponetIdGen.newWKID();
		afaUser.setUserId(userId.toString());
		/*afaUser.setStatus("-1");
		model.addAttribute("afaUser", afaUser);
		data.put("afaUser", afaUser);*/
		//新增时传入一个isNeedAudit参数 用来判断是否要进行审核流程
		if(!StringUtilsExt.isNotBlank(isNeedAudit)){
			isNeedAudit = "0";
		}
		if("1".equals(isNeedAudit)){
			afaUser.setStatus("-1");
			data.put("curEditStatus", EditStatus.ADD.STATUS);
		}else{
			afaUser.setStatus("normal");
			data.put("curEditStatus", "ONLY_ADD");
		}
		model.addAttribute("afaUser", afaUser);
		data.put("afaUser", afaUser);
		/*else if("0".equals(isNeedAudit)){
			data.put("curEditStatus", "ONLY_ADD");
		}else{
			logger.error("是否需要走审核流程参数未定义！");
			throw new BusinessException("是否需要走审核流程参数未定义！");
		}*/
		model.addAttribute(UIConst.UIPAGEMODEL, data);
		return "egov/asset/amcuser/amcuser_modify.ui";
	}
	
	
	/**
	 * <p>函数名称： doInsert       </p>
	 * <p>功能说明：新增用户信息（不走审核流程）
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param afaUser                      用户信息
	 * @param amcSubPosPanel_subPosByUser  机构岗位信息
	 * @return
	 *
	 * @date   创建时间：2017年11月17日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping(value = "doInsert.do", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> doInsert(ApiUser afaUser, List<DrcAuthRuleOrg> amcSubPosPanel_subPosByUser){
		Map<String, Object> result = new HashMap<String, Object>();
		//校验必填项
		result = this.validateUserRequired(afaUser);
		if(result.get("tag") == Boolean.FALSE){
			return result;
		}
		String userCode = afaUser.getUserCode();
		String userName = afaUser.getUserName();
		//新增前再次判断用户编号是否重复
		ApiUser apiUser = afaUserService.getUserByUserCode(userCode);
		if(apiUser != null){
			result.put("tag", false);
			result.put("msg", "用户账号已存在！");
			return result;
		}
		//保存前需要将用户状态设置为正常
		//afaUser.setStatus("normal");
		try{
			result = amcUserService.doInsert(afaUser, amcSubPosPanel_subPosByUser);
			if(result.get("tag") == Boolean.TRUE){
				result.put("tag", true);
				result.put("msg", "用户【"+ userCode +"】" + userName +"新增成功！");
			}
		}catch(Exception e){
			logger.error("用户【"+ userCode +"】" + userName +"新增失败！" + e.getMessage());
			result.put("tag", false);
			result.put("msg", "用户【"+ userCode +"】" + userName +"新增失败！");
		}
		return result;
	}

	
	/**
	 * <p>函数名称：doUpdate        </p>
	 * <p>功能说明：修改用户信息（不走审核流程）
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param afaUser                      用户信息
	 * @param amcSubPosPanel_subPosByUser  机构岗位信息
	 * @return
	 *
	 * @date   创建时间：2017年11月17日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping(value = "doUpdate.do", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> doUpdate(ApiUser afaUser, List<DrcAuthRuleOrg> amcSubPosPanel_subPosByUser) {
		Map<String, Object> result = new HashMap<String, Object>();
		//校验必填项
		result = this.validateUserRequired(afaUser);
		if(result.get("tag") == Boolean.FALSE){
			return result;
		}
		String userCode = afaUser.getUserCode();
		String userName = afaUser.getUserName();
		try{
			result = amcUserService.doUpdate(afaUser, amcSubPosPanel_subPosByUser);
			if(result.get("tag") == Boolean.TRUE){
				result.put("tag", true);
				result.put("msg", "用户【"+ userCode +"】" + userName +"修改成功！");
			}
		}catch(Exception e){
			logger.error("用户【"+ userCode +"】" + userName +"修改失败！" + e.getMessage());
			result.put("tag", false);
			result.put("msg", "用户【"+ userCode +"】" + userName +"修改失败！");
		}
		return result;
	}

	
	/**
	 * <p>函数名称：doDelete        </p>
	 * <p>功能说明：删除用户信息  提交(或不走审核流程的删除)
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param userId      用户id
	 * @param userCode    用户账号
	 * @param userName    用户名
	 * @param isNeedAudit 是否需要审核流程参数
	 * @return
	 *
	 * @date   创建时间：2017年9月22日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping(value = "doDelete.do", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> doDelete(String userId, String userCode, String userName, String isNeedAudit){
		if(!StringUtilsExt.isNotBlank(isNeedAudit)){
			isNeedAudit = "0";
		}
		Map<String, Object> result = new HashMap<String, Object>();
		User user = AppContext.getAppContext().getSessionUser();
		if(!StringUtilsExt.isNotBlank(userId)){
			result.put("tag", false);
			result.put("msg", "用户id为空！");
			return result;
		}
		if(!StringUtilsExt.isNotBlank(userCode)){
			result.put("tag", false);
			result.put("msg", "用户账号为空！");
			return result;
		}
		if(!StringUtilsExt.isNotBlank(userName)){
			result.put("tag", false);
			result.put("msg", "用户名为空！");
			return result;
		}
		ApiUser afaUser = new ApiUser();
		afaUser.setUserId(userId);
		afaUser.setUserCode(userCode);
		afaUser.setUserName(userName);
		//需要走审核流程
		if("1".equals(isNeedAudit)){
			List<ApiUser> apiUsers = new ArrayList<ApiUser>();
			
			apiUsers.add(afaUser);
			//删除一个用户
			result = this.deleteUsers(user, apiUsers);
			Integer successCount = (Integer)result.get("successCount");
			Integer errCount = (Integer)result.get("errCount");
			if(successCount == null){
				successCount = new Integer(0);
			}
			if(errCount == null){
				errCount = new Integer(0);
			}
			if(successCount.intValue() == 0){
				logger.warn("用户【" + userCode + "】"+ userName +"存在待办事项或在其他流程中，删除提交失败！");
				result.put("tag", false);
				result.put("msg", "用户【" + userCode + "】"+ userName +"存在待办事项或在其他流程中，删除提交失败！");
			}else{
				result.put("tag", true);
				result.put("msg", "用户【" + userCode + "】"+ userName +"删除提交成功！");
			}
		}else{
			//不需要走审核流程
			try{
				result = amcUserService.doDelete(afaUser);
			}catch(Exception e){
				logger.error("用户【"+ userCode +"】"+ userName +"删除失败！"+e.getMessage());
				result.put("tag", false);
				result.put("msg", "用户【"+ userCode +"】"+ userName +"删除失败！");
			}
		}
		/*else if("0".equals(isNeedAudit)){
			//不需要走审核流程
			try{
				result = amcUserService.doDelete(afaUser);
			}catch(Exception e){
				logger.error("用户【"+ userCode +"】"+ userName +"删除失败！"+e.getMessage());
				result.put("tag", false);
				result.put("msg", "用户【"+ userCode +"】"+ userName +"删除失败！");
			}
		}else {
			logger.error("是否需要走审核流程参数未定义！");
			result.put("tag", false);
			result.put("msg", "参数错误！");
		}*/
		return result;
	}
	

	
	/**
	 * <p>函数名称：queryAmcUserPage        </p>
	 * <p>功能说明：查询用户管理列表页面分页信息
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param searcher
	 * @param page
	 * @return
	 *
	 * @date   创建时间：2017年9月22日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping(value = "queryAmcUserPage.do")
	@ResponseBody
	public GridData queryAmcUserPage(Searcher searcher, Page<ApiUserOrgPos> page) {
		Page<ApiUserOrgPos> afaUsers = amcUserService.queryApiUserPage(searcher, page);
		return new GridData(new PageResult<ApiUserOrgPos>(afaUsers));
	}

	
	/**
	 * <p>函数名称：validateUserCode        </p>
	 * <p>功能说明：验证用户账号唯一性
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param userCode
	 * @return
	 *
	 * @date   创建时间：2017年9月22日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping(value = "validateUserCode.do")
	@ResponseBody
	public int validateUserCode(String userCode) {
		return this.getUserByUserCode(userCode);		
	}

	/**
	 * <p>函数名称：querySubOrgByUserCode        </p>
	 * <p>功能说明：获取机构列表分页
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param searcher
	 * @param page
	 * @return
	 *
	 * @date   创建时间：2017年4月10日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn) 
	 */
	@RequestMapping(value = "querySubOrgByUserCode.do", method = RequestMethod.POST)
	@ResponseBody
	public GridData querySubOrgByUserCode(Searcher searcher, Page<DrcAuthRuleOrg> page) {
		Page<DrcAuthRuleOrg> orgs = amcUserService.querySubOrgByUserCode(searcher,page);
		return new GridData(new PageResult<DrcAuthRuleOrg>(orgs));
	}

	/**
	 * <p>函数名称： delSubOrg       </p>
	 * <p>功能说明：删除机构岗位信息
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param userCode 用户编码
	 * @param orgId    单位ID
	 * @param roleId   角色ID
	 * @param roleCode 角色编码
	 * @return
	 *
	 * @date   创建时间：2017年4月10日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn) 
	 */
	@RequestMapping(value = "delSubOrg.do", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> delSubOrg(String userCode, String orgId, String roleId,String roleCode) {
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			result = amcUserService.delSubOrg(userCode, orgId, roleId, roleCode);
		} catch (Exception e) {
			logger.error("机构【id:"+ orgId +"】岗位【id:"+ roleId +"】信息删除失败！" +e.getMessage());
			result.put("tag", false);
			result.put("msg", "机构岗位信息删除失败！");
		}
		return result;
	}
	
	
	/**
	 * <p>函数名称：querySubPosList        </p>
	 * <p>功能说明：查询岗位信息
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @return
	 *
	 * @date   创建时间：2017年10月27日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping(value="querySubPosList.do")
	@ResponseBody
	public List<AfaAuthParty> querySubPosList(){
		return amcUserService.querySubPosList();
	}	
	
	/**
	 * <p>函数名称：batchDeleteUsers        </p>
	 * <p>功能说明：批量删除用户
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param amcUsers
	 * @param isNeedAudit 是否需要审核流程参数
	 * @return
	 *
	 * @date   创建时间：2017年4月26日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn) 
	 */
	@RequestMapping(value = "batchDeleteUsers.do")
	@ResponseBody
	public Map<String, Object> batchDeleteUsers(List<ApiUser> amcUsers, String isNeedAudit){
		if(!StringUtilsExt.isNotBlank(isNeedAudit)){
			isNeedAudit = "0";
		}
		Map<String, Object> result = new HashMap<String, Object>();
		User user = AppContext.getAppContext().getSessionUser();
		//1代表需要走审核流程
		if("1".equals(isNeedAudit)){
			result = this.deleteUsers(user, amcUsers);
			Integer successCount = (Integer)result.get("successCount");
			Integer errCount = (Integer)result.get("errCount");
			if(successCount == null){
				successCount = new Integer(0);
			}
			if(errCount == null){
				errCount = new Integer(0);
			}
			result.put("tag", true);
			result.put("msg", "共提交"+ (successCount.intValue() + errCount.intValue())+"条需要删除的用户信息，其中成功"+ successCount.intValue() +"条，失败" + errCount.intValue() + "条！");
		}else{
			//遍历用户判断是否有待办事项
			for(ApiUser afaUser:amcUsers){
				String userCode = afaUser.getUserCode();
				String userName = StringUtilsExt.convertNullToString(afaUser.getUserName());
				if(amcUserService.querAssetTodoUsers(userCode) > 0){
					result.put("tag", false);
					result.put("msg", "【" + userCode + "】"+ userName +"存在待办事项，不能删除！");
					return result;
				}
			}
			try{
				result = amcUserService.batchDeleteUsers(amcUsers);
			}catch(Exception e){
				logger.error("批量删除用户失败！"+e.getMessage());
				result.put("tag", false);
				result.put("msg", "批量删除用户失败！");
			}
		}
		/*else if("0".equals(isNeedAudit)){
			//0代表不需要走审核流程
			//遍历用户判断是否有待办事项
			for(ApiUser afaUser:amcUsers){
				String userCode = afaUser.getUserCode();
				String userName = StringUtilsExt.convertNullToString(afaUser.getUserName());
				if(amcUserService.querAssetTodoUsers(userCode) > 0){
					result.put("tag", false);
					result.put("msg", "【" + userCode + "】"+ userName +"存在待办事项，不能删除！");
					return result;
				}
			}
			try{
				result = amcUserService.batchDeleteUsers(amcUsers);
			}catch(Exception e){
				logger.error("批量删除用户失败！"+e.getMessage());
				result.put("tag", false);
				result.put("msg", "批量删除用户失败！");
			}
		}else {
			logger.error("是否需要走审核流程参数未定义！");
			result.put("tag", false);
			result.put("msg", "是否需要走审核流程参数未定义！");
		}*/
		return result;
	}
	
	/**
	 * <p>函数名称：deleteUsers        </p>
	 * <p>功能说明：删除用户信息提交 进工作流
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param user
	 * @param apiUsers
	 * @return
	 *
	 * @date   创建时间：2017年9月22日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	private Map<String, Object> deleteUsers(User user, List<ApiUser> apiUsers){
		Map<String, Object> result = new HashMap<String, Object>();
		
		int successCount=0;
		int errCount=0;
		for(ApiUser afaUser:apiUsers){
			String userCode = StringUtilsExt.convertNullToString(afaUser.getUserCode());
			String userName = StringUtilsExt.convertNullToString(afaUser.getUserName());
			//判断是否有待办
			if(amcUserService.querAssetTodoUsers(userCode) > 0){
				errCount++;
				continue;
			}
			//判断是否有流程中的数据
			AimsUserMain queryUserMain = new AimsUserMain();
			queryUserMain.setUserCode(userCode);
			queryUserMain.setStatus(1);
			AimsUserMain aimsUserMain = new AimsUserMain();
			List<AimsUserMain> userMains = aimsUserMainService.select(queryUserMain);
			if(userMains != null && userMains.size() > 0){
				aimsUserMain = userMains.get(0);
				errCount++;
				continue;
			}else{
				aimsUserMain = this.getAimsUserMain(user, afaUser, BizStatus.TMP_SAVE.STATUS, BusType.DELETE.TYPE);
			}
			
			aimsUserMainService.addAimsUserMain(aimsUserMain);
					
			//暂存
			amcUserService.doTempSave(aimsUserMain, afaUser, null, null, 1, user);
					
			Integer handle;
			handle = HandleType.SUBMIT.getHandle();
					
			//提交数据 走工作流
			ActivitiParams params = getOperateParam(aimsUserMain, handle);
			try {
				amcUserService.doAuditOperation(aimsUserMain, afaUser, null, params,"USER_SUBMIT", user);
				result.put("tag", true);
				result.put("msg", "删除【"+ userCode +"】"+ userName +"的用户信息已提交！");
			} catch (Exception e) {
				logger.error("用户【" + userCode + "】"+ userName +"的信息提交失败！"+e.getMessage());
				result.put("tag", false);
				result.put("msg", "删除【"+ userCode +"】"+ userName +"的用户信息提交失败！");
			}
			successCount++;
		}
		result.put("successCount", successCount);
		result.put("errCount", errCount);
		return result;
	}
	
	/**
	 * <p>函数名称：showResetPassWord        </p>
	 * <p>功能说明：显示重置密码页面
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @return
	 *
	 * @date   创建时间：2017年4月26日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn) 
	 */
	@RequestMapping(value = "showResetPassWord.do")
	public String showResetPassWord(){
		return "egov/asset/amcuser/amcuser_resetpassword.ui";
	}
	
	/**
	 * <p>函数名称：resetPassWord        </p>
	 * <p>功能说明：重置密码
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param afaUser
	 * @param newPassword
	 * @return
	 *
	 * @date   创建时间：2017年4月26日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn) 
	 */
	@RequestMapping(value = "resetPassWord.do", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> resetPassWord(ApiUser afaUser, @RequestParam(value = "newPassword", required = false) String newPassword){
		Map<String, Object> result = new HashMap<String, Object>();
		try{
			result = amcUserService.resetPassWord(afaUser,newPassword);
		}catch(Exception exception){
			logger.error("修改密码失败！"+ exception.getMessage());
			result.put("tag", false);
			result.put("msg", exception.getMessage());
		}
		return result;
	}
	
	/**
	 * <p>函数名称： queryByOrgAndRole       </p>
	 * <p>功能说明：查询机构岗位权限
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param orgCode  单位编码
	 * @param roleCode 角色编码
	 * @return
	 *
	 * @date   创建时间：2017年10月27日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping(value = "queryByOrgAndRole.do")
	@ResponseBody
	public Map<String, Object> queryByOrgAndRole(String orgCode, String roleCode){
		Map<String, Object> result = new HashMap<String, Object>();
		try{
			result = amcUserService.queryByOrgAndRole(orgCode, roleCode);
		}catch(Exception exception){
			logger.error("查询机构岗位权限失败！"+exception.getMessage());
			result.put("tag", false);
			result.put("msg", exception.getMessage());
		}
		return result;
	}
	
	
	/**
	 * <p>函数名称：getUserByUserCode        </p>
	 * <p>功能说明：校验用户编码是否唯一
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param userCode
	 * @return
	 *
	 * @date   创建时间：2017年9月20日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	private int getUserByUserCode(String userCode){
		userCode = StringUtilsExt.convertNullToString(userCode);
		ApiUser apiUser = afaUserService.getUserByUserCode(userCode);
		if(apiUser != null){
			return 1;
		}else{
			return 0;
		}
	}
	
	/**
	 * <p>函数名称：doTempSave        </p>
	 * <p>功能说明：暂存
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param afaUser
	 * @param amcSubPosPanel_subPosByUser
	 * @param action
	 * @return
	 *
	 * @date   创建时间：2017年9月21日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@Operation(comment = "用户管理-暂存")
	@RequestMapping(value="doTempSave.do",name="后台用户管理信息暂存",method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> doTempSave(ApiUser afaUser, List<DrcAuthRuleOrg> amcSubPosPanel_subPosByUser){
		Map<String, Object> result = new HashMap<String, Object>();
		User user = AppContext.getAppContext().getSessionUser();
		
		int editFlag = 1;
		String status = StringUtilsExt.convertNullToString(afaUser.getStatus());
		String userCode = StringUtilsExt.convertNullToString(afaUser.getUserCode());
		AimsUserMain queryUserMain = new AimsUserMain();
		queryUserMain.setUserCode(userCode);
		queryUserMain.setStatus(1);
		List<AimsUserMain> userMains = new ArrayList<AimsUserMain>();
		AimsUserMain aimsUserMain = new AimsUserMain();
		//判断暂存的用户信息  是否在删除流程中
		
		//判断流程中是否有正在进行的操作
		if("-1".equals(status)){
			queryUserMain.setBusType(BusType.ADD.TYPE);
			userMains = aimsUserMainService.select(queryUserMain);
			if(userMains == null || userMains.size() == 0){
				aimsUserMain = this.getAimsUserMain(user, afaUser, BizStatus.TMP_SAVE.STATUS, BusType.ADD.TYPE);
				aimsUserMainService.addAimsUserMain(aimsUserMain);
				//如果没有新增的流程  则表明该用户信息是第一次新增
				editFlag = 0;
				//校验用户账号是否存在
				if(getUserByUserCode(userCode) != 0){
					result.put("tag", false);
					result.put("msg", "用户账号已存在！");
					return result;
				}
			}else{
				aimsUserMain = userMains.get(0);
			}
		}else{
			queryUserMain.setBusType(BusType.EDIT.TYPE);
			userMains = aimsUserMainService.select(queryUserMain);
			if(userMains == null || userMains.size() == 0){
				aimsUserMain = this.getAimsUserMain(user, afaUser, BizStatus.TMP_SAVE.STATUS, BusType.EDIT.TYPE);
				aimsUserMainService.addAimsUserMain(aimsUserMain);
			}else{
				aimsUserMain = userMains.get(0);
			}
		}
		//暂存用户信息
		// 4、暂存的时候工作流需记录   // 获取传给工作流的参数
		ActivitiParams params = getOperateParam(aimsUserMain, null);
		amcUserService.doTempSave(aimsUserMain, afaUser, amcSubPosPanel_subPosByUser, params, editFlag, user);
		result.put("tag", true);
		result.put("msg", "暂存成功！");
		return result;
	}
	
	/**
	 * <p>函数名称： doCommit       </p>
	 * <p>功能说明：提交
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param afaUser
	 * @param amcSubPosPanel_subPosByUser
	 * @param action
	 * @return
	 *
	 * @date   创建时间：2017年9月21日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@Operation(comment = "用户管理-提交")
	@RequestMapping(value="doCommit.do", name="用户管理-提交")
	@ResponseBody
	public Map<String, Object> doCommit(ApiUser afaUser, List<DrcAuthRuleOrg> amcSubPosPanel_subPosByUser, String action){
		Map<String, Object> result = new HashMap<String, Object>();
		User user = AppContext.getAppContext().getSessionUser();
		
		AimsUserMain queryUserMain = new AimsUserMain();
		String userCode = StringUtilsExt.convertNullToString(afaUser.getUserCode());
		String userName = StringUtilsExt.convertNullToString(afaUser.getUserName());
		
		String status = StringUtilsExt.convertNullToString(afaUser.getStatus());
		queryUserMain.setUserCode(userCode);
		queryUserMain.setStatus(1);
		int editFlag = 1;
		List<AimsUserMain> userMains = new ArrayList<AimsUserMain>();
		AimsUserMain aimsUserMain = new AimsUserMain();
		//判断流程中是否有正在进行的操作 需要判断是新增提交还是修改提交
		if("-1".equals(status)){
			queryUserMain.setBusType(BusType.ADD.TYPE);
			userMains = aimsUserMainService.select(queryUserMain);
			if(userMains == null || userMains.size() == 0){
				aimsUserMain = this.getAimsUserMain(user, afaUser, BizStatus.TMP_SAVE.STATUS, BusType.ADD.TYPE);
				aimsUserMainService.addAimsUserMain(aimsUserMain);
				//如果没有新增的流程  则表明该用户信息是第一次新增
				editFlag = 0;
				//校验用户账号是否存在
				if(getUserByUserCode(userCode) != 0){
					result.put("tag", false);
					result.put("msg", "用户账号已存在！");
					return result;
				}
			}else{
				aimsUserMain = userMains.get(0);				
			}
		}else{
			queryUserMain.setBusType(BusType.EDIT.TYPE);
			userMains = aimsUserMainService.select(queryUserMain);
			if(userMains == null || userMains.size() == 0){
				aimsUserMain = this.getAimsUserMain(user, afaUser, BizStatus.TMP_SAVE.STATUS, BusType.EDIT.TYPE);
				aimsUserMainService.addAimsUserMain(aimsUserMain);
			}else{
				aimsUserMain = userMains.get(0);
			}
		}
		//暂存
		amcUserService.doTempSave(aimsUserMain, afaUser, amcSubPosPanel_subPosByUser, null, editFlag, user);
		
		Integer handle;
		handle = HandleType.SUBMIT.getHandle();
		
		//提交数据 走工作流
		ActivitiParams params = getOperateParam(aimsUserMain, handle);
		try {
			amcUserService.doAuditOperation(aimsUserMain, afaUser,amcSubPosPanel_subPosByUser,params,"USER_SUBMIT", user);
			result.put("tag", true);
			result.put("msg", "用户【" + userCode + "】"+ userName +"的信息提交成功！");
		} catch (Exception e) {
			e.printStackTrace();
			result.put("tag", false);
			result.put("msg", "用户【" + userCode + "】"+ userName +"的信息提交失败！");
		}
		return result;
	}
	
	/**
	 * <p>函数名称：  doAudit      </p>
	 * <p>功能说明： 审核
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param afaUser
	 * @param amcSubPosPanel_subPosByUser
	 * @param auditComment   审核意见
	 * @return
	 *
	 * @date   创建时间：2017年9月21日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@Operation(comment="用户管理-审核")
	@RequestMapping(value="doAudit.do", name="用户管理-审核")
	@ResponseBody
	public Map<String, Object> doAudit(ApiUser afaUser, List<DrcAuthRuleOrg> amcSubPosPanel_subPosByUser, String auditComment){
		Map<String, Object> result = new HashMap<String, Object>();
		User user = AppContext.getAppContext().getSessionUser();
		String auditorCode = StringUtilsExt.convertNullToString(user.getUserCode());
		String auditorName = StringUtilsExt.convertNullToString(user.getUserName());
		auditComment = StringUtilsExt.convertNullToString(auditComment);
		String auditor = auditorCode + " " + auditorName;
		
		String userCode = StringUtilsExt.convertNullToString(afaUser.getUserCode());
		String userName = StringUtilsExt.convertNullToString(afaUser.getUserName());
		
		//审核
		AimsUserMain queryUserMain = new AimsUserMain();
		queryUserMain.setUserCode(userCode);
		queryUserMain.setStatus(1);
		List<AimsUserMain> userMains = aimsUserMainService.select(queryUserMain);
		if(userMains == null || userMains.size() == 0){
			result.put("tag", false);
			result.put("msg", "不存在【" + userCode + "】"+ userName +"的信息！");
			return result;
		}
		AimsUserMain aimsUserMain = userMains.get(0);
		aimsUserMain.setAuditor(auditor);
		aimsUserMain.setAuditDate(DateUtilsExt.getNowDateTime());
		if("".equals(auditComment)){
			aimsUserMain.setAuditComment("同意");
		}else{
			aimsUserMain.setAuditComment(auditComment);
		}
		
		//提交数据  走工作流
		Integer handle;
		handle = HandleType.PASS.getHandle();
		ActivitiParams params = getOperateParam(aimsUserMain,handle);
		try{
			amcUserService.doAuditOperation(aimsUserMain, afaUser, amcSubPosPanel_subPosByUser, params, "USER_AUDIT", user);
			result.put("tag", true);
			result.put("msg", "用户【" + userCode + "】"+ userName +"的信息审核通过！");
		}catch(Exception e){
			result.put("tag", false);
			result.put("msg", "用户【" + userCode + "】"+ userName +"的信息审核失败！");
		}
		return result;
	}
	
	/**
	 * <p>函数名称： doBack       </p>
	 * <p>功能说明：退回
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param afaUser
	 * @param amcSubPosPanel_subPosByUser
	 * @param auditComment 审核意见
	 * @return
	 *
	 * @date   创建时间：2017年9月21日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@Operation(comment="用户管理-退回")
	@RequestMapping(value="doBack.do", name="用户管理-退回")
	@ResponseBody
	public Map<String, Object> doBack(ApiUser afaUser, List<DrcAuthRuleOrg> amcSubPosPanel_subPosByUser, String auditComment){
		Map<String, Object> result = new HashMap<String, Object>();
		User user = AppContext.getAppContext().getSessionUser();
		String auditorCode = StringUtilsExt.convertNullToString(user.getUserCode());
		String auditorName = StringUtilsExt.convertNullToString(user.getUserName());
		String auditor = auditorCode + " " + auditorName;
		auditComment = StringUtilsExt.convertNullToString(auditComment);
		
		String userCode = StringUtilsExt.convertNullToString(afaUser.getUserCode());
		String userName = StringUtilsExt.convertNullToString(afaUser.getUserName());
		//退回
		AimsUserMain queryUserMain = new AimsUserMain();
		queryUserMain.setUserCode(userCode);
		queryUserMain.setStatus(1);
		List<AimsUserMain> userMains = aimsUserMainService.select(queryUserMain);
		if(userMains == null || userMains.size() == 0){
			result.put("tag", false);
			result.put("msg", "不存在【" + userCode + "】"+ userName +"的信息！");
			return result;
		}
		AimsUserMain aimsUserMain = userMains.get(0);
		aimsUserMain.setAuditor(auditor);
		aimsUserMain.setAuditDate(DateUtilsExt.getNowDateTime());
		if("".equals(auditComment)){
			aimsUserMain.setAuditComment("退回");
		}
		aimsUserMain.setAuditComment(auditComment);
		
		//提交数据  走工作流
		Integer handle;
		handle = HandleType.RETURN.getHandle();
		ActivitiParams params = getOperateParam(aimsUserMain,handle);
		try{
			amcUserService.doAuditOperation(aimsUserMain, afaUser, amcSubPosPanel_subPosByUser, params, "USER_AUDIT", user);
			result.put("tag", true);
			result.put("msg", "用户【" + userCode + "】"+ userName +"的信息退回成功！");
		}catch(Exception e){
			logger.error("用户【" + userCode + "】"+ userName +"的信息退回失败！"+e.getMessage());
			result.put("tag", false);
			result.put("msg", "用户【" + userCode + "】"+ userName +"的信息退回失败！");
		}
		return result;
	}
	
	/**
	 * <p>函数名称：getOperateParam        </p>
	 * <p>功能说明：获取工作流参数
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param aimsUserMain
	 * @param handleNum
	 * @return
	 *
	 * @date   创建时间：2017年9月18日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	private ActivitiParams getOperateParam(AimsUserMain aimsUserMain, Integer handleNum){
		User user = AppContext.getAppContext().getSessionUser();
		
		ActivitiParams params = new ActivitiParams();
		params.setBusinessId(aimsUserMain.getUserCode());// 将用户编码作为唯一标识
		params.setBusType("USER_MANAGE");//用户管理审核  传给工作流标识
		params.setCreatorName(aimsUserMain.getCreator());// 创建者
		params.setCreatorId(aimsUserMain.getCreatorId());// 创建者ID
		params.setComment(aimsUserMain.getAuditComment());// 赋值意见
		params.addCondtion(ActivitiCondition.BILL_TYPE.getCode(), new ArrayList<String>());
		params.setUserCode(user.getUserCode());
		params.setUserName(user.getUserName());
		params.setHandle(handleNum);// 设置进入工作流处理类型
		Map<String, Object> extParams = new HashMap<String, Object>();
		extParams.put("creator", StringUtilsExt.substringBefore(aimsUserMain.getCreator(), " "));
		extParams.put("orgId", aimsUserMain.getOrgId());
		extParams.put("orgCode", aimsUserMain.getOrgCode());
		extParams.put("bizId", aimsUserMain.getUserCode());
		params.setStartKeyMap(extParams);
		return params;
	}
	
	/**
	 * <p>函数名称：getUserType        </p>
	 * <p>功能说明：获取平台用户类型字典项
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @return
	 *
	 * @date   创建时间：2017年9月21日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@Operation(comment="获取平台用户类型字典项")
	@RequestMapping(value="getUserType.do")
	@ResponseBody
	public List<DictEntry> getUserType() {
		List<DictEntry> dictItem = DictionaryManager.getInstance().getDictEntries("APPCENTER","AFA_IDENTITY");
		return dictItem;
	}
	
	/**
	 * <p>函数名称：getUserStatus        </p>
	 * <p>功能说明：获取平台用户状态字典项
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @return
	 *
	 * @date   创建时间：2017年9月21日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@Operation(comment="获取平台用户状态字典项")
	@RequestMapping(value="getUserStatus.do")
	@ResponseBody
	public List<DictEntry> getUserStatus() {
		List<DictEntry> dictItem = DictionaryManager.getInstance().getDictEntries("APPCENTER","AFA_ATATUS");
		return dictItem;
	}
	
	@Operation(comment="显示附件")
	@RequestMapping(value="showAttach.do", name="显示附件")
	public String showAttach(Model model){
		return "egov/asset/amcuser/amcuser_attach.ui";
	}
	
	/**
	 * <p>函数名称：attachVerify        </p>
	 * <p>功能说明：附件校验
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param afaUser
	 * @return
	 *
	 * @date   创建时间：2017年10月18日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping(value="attachVerify.do",method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> attachVerify(ApiUser afaUser){
		Map<String, Object> result = new HashMap<String, Object>();
		result = this.doAttachVerify(afaUser);
		return result;
	}
	
	private Map<String, Object> doAttachVerify(ApiUser afaUser){
		Map<String, Object> result = new HashMap<String, Object>();
		String userId = StringUtilsExt.convertNullToString(afaUser.getUserId());
		String userCode = StringUtilsExt.convertNullToString(afaUser.getUserCode());
		String userName = StringUtilsExt.convertNullToString(afaUser.getUserName());
		String level = "1";
		
		/*List<AssetAttachItem> attachItemList = attachFileService.checkAttachmentRequired(
				"APPCENTER", new String[] { "USER_MANAGE" },
				new String[] {"-"}, level, userCode);*/
		List<AssetAttachItem> attachItemList = attachFileService.checkAttachmentRequired(
				"APPCENTER", new String[] { "USER_MANAGE" },
				new String[] {"-"}, level, userId);
		if (attachItemList != null && attachItemList.size() > 0) {
			result.put("tag", false);
			result.put("msg",
					"用户【" + userCode + "】" + userName + "必填附件未填写完整!");
		}else{
			result.put("tag", true);
			result.put("msg", "success");
		}
		return result;
	}
	
	@RequestMapping(value="showTodoIndex.do",name="用户管理办结库首页")
	public String showTodoIndex(Model model){
		return "egov/asset/amcuser/showTodoIndex.ui";
	}
	
	/**
	 * <p>函数名称：queryShowTodoPage        </p>
	 * <p>功能说明：查询用户管理办结库数据
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param searcher
	 * @param page
	 * @param busType
	 * @return
	 *
	 * @date   创建时间：2017年9月27日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping(value = "queryShowTodoPage.do")
	@AjaxResponseBody
	public GridData queryShowTodoPage(Searcher searcher, Page<ApiUser> page, String busType) {
		if(StringUtilsExt.isNotBlank(busType)){
			if(BusType.ADD.TYPE.equals(busType)){
				searcher.addCondition("T.STATUS","normal","=");
			}else if(BusType.DELETE.TYPE.equals(busType)){
				searcher.addCondition("T.STATUS","normal","<>");
			}	
		}
		Page<ApiUser> apiUsers = amcUserService.queryShowTodoPage(searcher, page);
		return new GridData(new PageResult<ApiUser>(apiUsers));	
	}
	
	/**
	 * <p>函数名称： getDictItemByCode       </p>
	 * <p>功能说明：获取用户管理办结库左侧树
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param dictCode
	 * @return
	 *
	 * @date   创建时间：2017年9月27日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	@RequestMapping("getDictItemByCode.do")
	@ResponseBody
	public List<DictItem> getDictItemByCode(String dictCode){
		List<DictItem> dictItem = AssetDictManager.getInstance().getDictItems("egov-asset-aims", dictCode);
		return dictItem;
	}
	
	private AimsUserMain getAimsUserMain(User user, ApiUser apiUser,Integer bizStatus, String busType){
		AimsUserMain aimsUserMain = new AimsUserMain();
		Long orgId = user.getOrgLongId();
		String creatorId = StringUtilsExt.convertNullToString(user.getUserId());
		String creatorCode = StringUtilsExt.convertNullToString(user.getUserCode());
		String creatorName = StringUtilsExt.convertNullToString(user.getUserName());
		String orgCode = StringUtilsExt.convertNullToString(user.getOrgCode());
		String orgName = StringUtilsExt.convertNullToString(user.getOrgName());
		Long rgnId = user.getRgnId();
		String rgnCode = StringUtilsExt.convertNullToString(user.getRgnCode());
		String rgnName = StringUtilsExt.convertNullToString(user.getRgnName());
		
		String userCode = apiUser.getUserCode();
		String userName = apiUser.getUserName();
		
		aimsUserMain.setCreatorId(creatorId);
		aimsUserMain.setCreator(creatorCode+" "+creatorName);
		aimsUserMain.setOrgId(orgId);
		aimsUserMain.setOrgCode(orgCode);
		aimsUserMain.setOrgName(orgName);
		aimsUserMain.setRgnId(rgnId);
		aimsUserMain.setRgnCode(rgnCode);
		aimsUserMain.setRgnName(rgnName);
		aimsUserMain.setUserId(apiUser.getUserId());
		if(StringUtilsExt.isNotBlank(userCode)){
			aimsUserMain.setUserCode(userCode);
		}
		if(StringUtilsExt.isNotBlank(userName)){
			aimsUserMain.setUserName(userName);
		}
		aimsUserMain.setCreateDate(DateUtilsExt.getNowDateTime());
		aimsUserMain.setStatus(1);
		if(BizStatus.TMP_SAVE.STATUS.equals(bizStatus)){
			aimsUserMain.setBizStatus(BizStatus.TMP_SAVE.STATUS);
			aimsUserMain.setBizStatusName(BizStatus.TMP_SAVE.NAME);
		}
		if(BusType.ADD.TYPE.equals(busType)){
			aimsUserMain.setBusType(BusType.ADD.TYPE);
			aimsUserMain.setBusTypeName(BusType.ADD.NAME);
		} else if(BusType.EDIT.TYPE.equals(busType)){
			aimsUserMain.setBusType(BusType.EDIT.TYPE);
			aimsUserMain.setBusTypeName(BusType.EDIT.NAME);
		} else if(BusType.DELETE.TYPE.equals(busType)){
			aimsUserMain.setBusType(BusType.DELETE.TYPE);
			aimsUserMain.setBusTypeName(BusType.DELETE.NAME);
		}
		
		return aimsUserMain;
	}
	
	/**
	 * <p>函数名称：validateUserRequired        </p>
	 * <p>功能说明：校验用户信息必填项
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param afaUser
	 * @return
	 *
	 * @date   创建时间：2017年11月17日
	 * @author 作者：黄振雄 (mailto:huangzhenxiong@bosssoft.com.cn)
	 */
	private Map<String, Object> validateUserRequired(ApiUser afaUser){
		Map<String, Object> result = new HashMap<String, Object>();
		if(afaUser == null){
			logger.error("用户对象为null！");
			result.put("tag",false);
			result.put("msg", "用户对象为null！");
			return result;
		}
		String userCode = afaUser.getUserCode();
		String userName = afaUser.getUserName();
		if(!StringUtilsExt.isNotBlank(userCode)){
			result.put("tag",false);
			result.put("msg", "用户账号必填！");
		}else if(!StringUtilsExt.isNotBlank(userName)){
			result.put("tag",false);
			result.put("msg", "用户名必填！");
		}else {
			result.put("tag",true);
			result.put("msg", "用户必填校验通过！");
		}
		return result;
	}
}
