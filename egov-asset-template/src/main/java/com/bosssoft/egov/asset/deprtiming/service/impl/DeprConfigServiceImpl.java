package com.bosssoft.egov.asset.deprtiming.service.impl;


import java.util.List;

//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.deprtiming.entity.DeprConfig;
import com.bosssoft.egov.asset.deprtiming.mapper.DeprConfigMapper;
import com.bosssoft.egov.asset.deprtiming.service.DeprConfigService;

/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Mon Jan 09 14:26:18 CST 2017
 */

import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;
import com.bosssoft.platform.persistence.entity.Condition;


/**
 * 类说明: AimsDeprConfigService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-01-09   Administrator　　　新建
 * </pre>
 */
@Service
public class DeprConfigServiceImpl implements DeprConfigService {

	//private static Logger logger = LoggerFactory.getLogger(AimsDeprConfigServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private DeprConfigMapper deprConfigMapper;
	
	/**
	 *
	 * @param aimsDeprConfig
	 */
	public void addAimsDeprConfig(DeprConfig aimsDeprConfig)  {
//		deprConfigMapper.insert(aimsDeprConfig);
		deprConfigMapper.insertSelective(aimsDeprConfig);
	}

	/**
	 *
	 * @param aimsDeprConfig
	 */
	public void delAimsDeprConfig(DeprConfig aimsDeprConfig)  {
		deprConfigMapper.deleteByPrimaryKey(aimsDeprConfig);
	}

	/**
	 *
	 * @param aimsDeprConfig
	 */
	public void updateAimsDeprConfig(DeprConfig aimsDeprConfig)  {
//		deprConfigMapper.updateByPrimaryKey(aimsDeprConfig);
		deprConfigMapper.updateById(aimsDeprConfig);
	}

	/**
	 *
	 * @param aimsDeprConfig
	 * @retrun
	 */
	public List<DeprConfig> getAimsDeprConfigList(DeprConfig aimsDeprConfig)  {
		return null;
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<DeprConfig> queryAimsDeprConfigPage(Searcher searcher, Page<DeprConfig> page)  {
		return deprConfigMapper.queryAimsDeprConfigPage(searcher, page);
	}

	@Override
	public DeprConfig queryOneByOrgId(Long orgId, String assetType6Code) {
		return deprConfigMapper.queryOneByOrgId(orgId, assetType6Code);
	}

	@Override
	public List<DeprConfig> queryAllConfig(Condition condition) {
		return deprConfigMapper.selectByExample(condition);
	}


}