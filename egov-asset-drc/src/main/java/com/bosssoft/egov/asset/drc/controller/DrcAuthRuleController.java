/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Mon Jan 09 18:48:59 CST 2017
 */
package com.bosssoft.egov.asset.drc.controller;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.bosssoft.egov.asset.aims.api.org.entity.AimsBasicOrg;
import com.bosssoft.egov.asset.common.util.StringUtilsExt;
import com.bosssoft.egov.asset.drc.entity.DrcAuthRule;
import com.bosssoft.egov.asset.drc.service.DrcAuthRuleService;
import com.bosssoft.egov.asset.portal.PortalManager;
import com.bosssoft.egov.asset.runtime.User;
import com.bosssoft.egov.asset.runtime.UserHelper;
import com.bosssoft.egov.asset.runtime.web.context.AppContext;
import com.bosssoft.platform.appframe.api.entity.ApiMenu;
import com.bosssoft.platform.appframe.api.entity.ApiUser;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;
import com.bosssoft.platform.runtime.web.binding.annotation.AjaxResponseBody;
import com.bosssoft.platform.runtime.web.context.WebApplicationContext;
import com.bosssoft.platform.runtime.web.response.GridData;
import com.bosssoft.platform.runtime.web.response.PageResult;

@Controller
@RequestMapping(value="egov/asset/drc/drcauthrule",name="数据权限")
public class DrcAuthRuleController {

	@Autowired
	private DrcAuthRuleService drcAuthRuleService;

  /**
     * 列表页面
	 */
    @RequestMapping(value = "showIndex.do",name="数据权限入口页面")
    public String showIndex() {
        return "egov/asset/drc/drcauthrule/drcauthrule_index.ui";
    }
    
     /**
     * 新增页面
	 */
    @RequestMapping(value = "showAdd.do",name="数据权限新增页面")
    public String showAdd() {
        return "egov/asset/drc/drcauthrule/drcauthrule_add.ui";
    }
    
   /**
     * 新增
     * @param drcAuthRule 新增信息
	 */
    @RequestMapping(value = "doInsert.do",name="数据权限保存",method=RequestMethod.POST)
    @AjaxResponseBody
    public void doInsert(DrcAuthRule drcAuthRule)  {
      	drcAuthRuleService.addDrcAuthRule(drcAuthRule);
    }
    
   /**
     * 修改
     * @param drcAuthRule 修改信息
	 */
    @RequestMapping(value = "doUpdate.do",name="数据权限修改", method = RequestMethod.POST)
    @AjaxResponseBody
    public void doUpdate(DrcAuthRule drcAuthRule)  {
		drcAuthRuleService.updateDrcAuthRule(drcAuthRule);
    }
    
 /**
     * 删除
     * @param drcAuthRule 删除条件
	 */
	 @RequestMapping(value = "doDelete.do",name="数据权限删除" ,method = RequestMethod.POST)
	 @AjaxResponseBody
	 public void doDelete(DrcAuthRule drcAuthRule)  {
		drcAuthRuleService.delDrcAuthRule(drcAuthRule);
	 }
	   /**
     * 获取单条记录
     * @param  drcAuthRule 条件
	 */
	 @RequestMapping(value=" getDrcAuthRule")
	 @AjaxResponseBody
	 public DrcAuthRule getDrcAuthRule(DrcAuthRule drcAuthRule) {
		return null;
	}
	 
	  /**
     * 获取列表
     * @param  drcAuthRule 条件
	 */
	 @RequestMapping(value=" getDrcAuthRuleList",name="数据权限查询列表")
	 @AjaxResponseBody
	 public List<DrcAuthRule> getDrcAuthRuleList(DrcAuthRule drcAuthRule) {
		return null;
	}
	 /**
     * 获取分页
     * @param searcher 查询条件
     * @param page 分页信息
	 */
	 @RequestMapping(value="queryDrcAuthRulePage.do",name="数据权限分页查询")
	 @AjaxResponseBody
	 public  GridData queryDrcAuthRulePage(Searcher searcher, Page<DrcAuthRule> page) {
		
		 return new GridData(new PageResult<DrcAuthRule>(drcAuthRuleService.queryDrcAuthRulePage(searcher, page)));

	}
	 
	 @RequestMapping(value="queryOrgListByUser.do",name="获取登录用户对应授权单位列表")
	 @ResponseBody
	 public Map<String,Object> queryOrgListByUser(String orgId){
		 User user = AppContext.getAppContext().getSessionUser();		 
		 Map<String,Object> result = new HashMap<String,Object>();
		 result.put("currentorgId", user.getOrgId());
		 result.put("currentRoleCode", user.getRoleCodes()[0]);
		 result.put("hasChose", user.isChoseOrg());//是否已选择过单位了 若选择过 则需要定位当前单位
		 if(StringUtilsExt.isNotEmpty(orgId)) {
			 result.put("data", drcAuthRuleService.queryOrg(user.getUserId(), "user", orgId));
		 } else {
			 result.put("data", drcAuthRuleService.getOrgListByUser(user.getUserCode()));
		 }
		 return result;
	 }
	 
	 @RequestMapping(value="showOrgSelectIndex.do",name="登录单位选择")
	 public String showOrgSelectIndex(Model model){
		 return "egov/asset/init/init_index.ui";
	 }
	 
	 @RequestMapping(value="queryOrglistCountByUser.do",name="获取登录用户对应授权单位个数")
	 @ResponseBody
	 public int queryOrglistCountByUser(){
//		 AimsBasicOrg org = AppContext.getAppContext().getLoginOrgInfo();
//		 //已选择单位
//		 if(org != null) return 0;
		 User user = AppContext.getAppContext().getSessionUser();
		 //先判断是否已经有选择过单位
		 if(user.isChoseOrg()) return 1; //选择过 直接返回0
		 //先获取数据权限表数据 判断是否有数据 
//		 int drcCount = drcAuthRuleService.getOrgCountByParty(user.getUserId(), "user");
//		 //有不止配置一个权限 则直接返回
//		 if(drcCount > 1){
//			 return drcCount;
//		 } else if(drcCount > 0){//有一个 则设置用户对应单位为此单位信息
//			 //理论上不会执行这个了。。
//			 List<AimsBasicOrg> orgInfos = drcAuthRuleService.getOrgListByParty(user.getUserId(), "user");
//			 setUserOrgInfo(user, orgInfos.get(0));
//			 AppContext.getAppContext().resetSessionUser(user);
//			 user.setChoseOrg(true);
//			 return drcCount;
//		 }
//		 //无权限 则根据用户信息中自带的主机构信息获取对应单位信息
//		 if(user.getOrg() != null) {
//			 user.setChoseOrg(true);
//			 AppContext.getAppContext().resetSessionUser(user);			 
//			 return 1;
//		 };
//		 ApiUser apiUser =  (ApiUser) WebApplicationContext.getContext().getCurrentUser();			
//		 AimsBasicOrg orgInfo = UserHelper.getOrgInfo(apiUser.getMainOrgid());
//		 if(orgInfo != null) {			
//			 setUserOrgInfo(user, orgInfo);
//			 user.setChoseOrg(true);			 
//			 AppContext.getAppContext().resetSessionUser(user);
//			 return 1;
//		 } else {
//			 return 0;
//		 }
		 
		 List<AimsBasicOrg> orgList = drcAuthRuleService.getOrgListByUser(user.getUserCode());
		 if(orgList == null) {
			 orgList = new ArrayList<AimsBasicOrg>();
		 }
		 if(orgList.size() > 1){
			 return orgList.size();
		 } else if(orgList.size() > 0){
			 AimsBasicOrg orgInfo = UserHelper.getOrgInfo(orgList.get(0).getOrgCode());
			 setUserOrgInfo(user, orgInfo);
			 AppContext.getAppContext().resetSessionUser(user);
			 user.setChoseOrg(true);	
			 
			//重新设置 用户属性值
			 ApiUser apiUser =  (ApiUser)  WebApplicationContext.getContext().getCurrentUser();
			 Map<String,Object> paramsAttr = apiUser.getProperties();
			 paramsAttr.putAll(user.getProperties());
			 apiUser.setProperties(paramsAttr);
			 return 1;
		 }		 
		 //未查询到单位 则无单位了。
		 return 0;
	 }
	 
	 /**
	  * 
	  * <p>函数名称：   setUserOrgInfo     </p>
	  * <p>功能说明： 设置用户对应单位信息
	  *
	  * </p>
	  *<p>参数说明：</p>
	  * @param user
	  * @param orgInfo
	  *
	  * @date   创建时间：2017年2月18日
	  * @author 作者：xds (mailto:xiedeshou@bosssoft.com.cn)
	  */
	 private void setUserOrgInfo(User user,AimsBasicOrg orgInfo){
		 user.setOrg(orgInfo);
		 user.setRgnId(orgInfo.getRgnId());
		 user.setRgnCode(orgInfo.getRgnCode());
		 user.setRgnName(orgInfo.getRgnName());
		 user.setOrgId(orgInfo.getOrgId());
		 user.setOrgCode(orgInfo.getOrgCode());
		 user.setOrgName(orgInfo.getOrgName());
		 user.setAgenPrincipal(orgInfo.getAgenPrincipal());
	 }
	 
	 @RequestMapping(value="doSelectOrgSave.do",name="将选择的登录单位放入系统上下文中")
	 @ResponseBody
	 public Map<String,Object> doSelectOrgSave(AimsBasicOrg org){
		 User myUser = AppContext.getAppContext().getSessionUser();
		 AimsBasicOrg orgInfo = UserHelper.getOrgInfo(org.getOrgCode());
		 if(orgInfo != null){
			 setUserOrgInfo(myUser, orgInfo);
		 }
		 myUser.setChoseOrg(true);
		 myUser.setRoleCodes(new String[]{org.getRoleCode()});
		 //重置用户信息
		 AppContext.getAppContext().resetSessionUser(myUser);
//		 AppContext.getAppContext().setLoginOrgInfo(orgInfo);
		 //设置用户对应
		 //重置org
//		 myUser.setDrcSql(" AND ORG_CODE LIKE '" + org.getOrgCode() + "%'");
		
		 Map<String,Object> params = new HashMap<String,Object>();
		 params.put("flag", true);
		 params.put("msg", "设置成功");
		 return params;
	 }
	 
	 @RequestMapping(value="doSelectOrgSaveNew.do",name="将选择的登录单位放入系统上下文中")
	 @ResponseBody
	 public Map<String,Object> doSelectOrgSaveNew(AimsBasicOrg org){
		 User myUser = AppContext.getAppContext().getSessionUser();
		 AimsBasicOrg orgInfo = UserHelper.getOrgInfo(org.getOrgCode());
		 if(orgInfo != null){
			 setUserOrgInfo(myUser, orgInfo);
		 }
		 myUser.setChoseOrg(true);
		 myUser.setRoleCodes(new String[]{org.getRoleCode()});
		 myUser.setRoleNames(new String[]{org.getRoleName()});
		 //重新设置 用户属性值
		 ApiUser apiUser =  (ApiUser)  WebApplicationContext.getContext().getCurrentUser();
		 Map<String,Object> paramsAttr = apiUser.getProperties();
		 myUser.getProperties().put("ROLE_CODE", org.getRoleCode());
		 myUser.getProperties().put("ROLE_NAME", org.getRoleName());
		 paramsAttr.putAll(myUser.getProperties());		 
		 apiUser.setProperties(paramsAttr);
		 //重置用户信息
		 AppContext.getAppContext().resetSessionUser(myUser);
//		 AppContext.getAppContext().setLoginOrgInfo(orgInfo);
		 //设置用户对应
		 //重置org
//		 myUser.setDrcSql(" AND ORG_CODE LIKE '" + org.getOrgCode() + "%'");
		
		 Map<String,Object> params = new HashMap<String,Object>();
		 params.put("flag", true);
		 params.put("menu", PortalManager.getMenuByUserAndRole(org.getRoleCode()));
		 params.put("app", PortalManager.getAllApplicatons());
		 params.put("msg", "设置成功");
		 
		 return params;
	 }
	 
	 @RequestMapping(value="getMenuByRoles.do",name="根据角色获取菜单")
	 @ResponseBody
	 public Map<String,List<ApiMenu>> getMenuByRoles(){
		 User myUser = AppContext.getAppContext().getSessionUser();
		 return PortalManager.getMenuByUserAndRole(myUser.getRoleCodes());
	 }
	 
	 
	 
	 /**
	  * 
	  * <p>函数名称：queryOrg        </p>
	  * <p>功能说明：查询登录单位
	  *
	  * </p>
	  *<p>参数说明：</p>
	  * @param orgId
	  * @return
	  *
	  * @date   创建时间：2017年2月18日
	  * @author 作者：xds (mailto:xiedeshou@bosssoft.com.cn)
	  */
	 @RequestMapping(value="queryOrg.do",name="登录单位列表查询")
	 @ResponseBody	 
	 public List<AimsBasicOrg> queryOrg(String orgId){
		 //根据编码或者名称 查询
		 List<AimsBasicOrg> result = new ArrayList<AimsBasicOrg>();
		 User user = AppContext.getAppContext().getSessionUser();		 
		 result.addAll(drcAuthRuleService.queryOrg(user.getUserId(), "user", orgId));		 
		 return result;
	 }
}