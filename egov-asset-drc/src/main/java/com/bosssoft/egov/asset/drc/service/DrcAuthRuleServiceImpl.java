
/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Mon Jan 09 10:26:53 CST 2017
 */
package com.bosssoft.egov.asset.drc.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.aims.api.org.entity.AimsBasicOrg;
import com.bosssoft.egov.asset.aims.api.org.service.OrgService;
import com.bosssoft.egov.asset.common.util.MapUtilsExt;
import com.bosssoft.egov.asset.drc.DrcUtils;
import com.bosssoft.egov.asset.drc.entity.DrcAuthRule;
import com.bosssoft.egov.asset.drc.mapper.DrcAuthRuleMapper;
import com.bosssoft.egov.asset.mapper.AssetGeneralMapper;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.persistence.entity.Condition;
import com.bosssoft.platform.common.lang.data.Searcher;


/**
 * 类说明: DrcAuthRuleService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-01-09   Administrator　　　新建
 * </pre>
 */
@Service
public class DrcAuthRuleServiceImpl implements DrcAuthRuleService {

	private static Logger logger = LoggerFactory.getLogger(DrcAuthRuleServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private DrcAuthRuleMapper drcAuthRuleMapper;
	
	@Autowired
	@Qualifier(OrgService.REFERENCE_BEAN_NAME)
	private OrgService orgService;
	
	@Autowired
	private AssetGeneralMapper mapper;
	
	/**
	 *
	 * @param drcAuthRule
	 */
	public void addDrcAuthRule(DrcAuthRule drcAuthRule)  {
		drcAuthRuleMapper.insert(drcAuthRule);
	}

	/**
	 *
	 * @param drcAuthRule
	 */
	public void delDrcAuthRule(DrcAuthRule drcAuthRule)  {
		drcAuthRuleMapper.deleteByPrimaryKey(drcAuthRule);
	}

	/**
	 *
	 * @param drcAuthRule
	 */
	public void updateDrcAuthRule(DrcAuthRule drcAuthRule)  {
		drcAuthRuleMapper.updateByPrimaryKey(drcAuthRule);
	}

	/**
	 *
	 * @param drcAuthRule
	 * @retrun
	 */
	public List<DrcAuthRule> getDrcAuthRuleList(DrcAuthRule drcAuthRule)  {
		return drcAuthRuleMapper.select(drcAuthRule);
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<DrcAuthRule> queryDrcAuthRulePage(Searcher searcher, Page<DrcAuthRule> page)  {
		return drcAuthRuleMapper.queryDrcAuthRulePage(searcher, page);
	}

	@Override
	public DrcAuthRule getDrcAuthRule(DrcAuthRule drcAuthRule) {
		// TODO Auto-generated method stub
		return drcAuthRuleMapper.selectByPrimaryKey(drcAuthRule);
	}

	@Override
	public List<DrcAuthRule> getDrcAuthRuleListByParty(String partyId,String partyCode) {
		//根据用户id查找
		Condition condition = new Condition(DrcAuthRule.class);
		condition.createCriteria().andEqualTo("partyType", partyCode)
		.andEqualTo("partyId", partyId)
		.andEqualTo("status", "1");		
		return drcAuthRuleMapper.selectByExample(condition);
	}

	@Override
	public List<DrcAuthRule> getDrcAuthRuleWithOrgType(String partyId, String partyCode) {
		Condition condition = new Condition(DrcAuthRule.class);
		condition.createCriteria().andEqualTo("partyType", partyCode)
		.andEqualTo("partyId", partyId)
		.andEqualTo("ruleType", "org")
		.andEqualTo("status", "1");		
		return drcAuthRuleMapper.selectByExample(condition);
	}

	@Override
	public List<AimsBasicOrg> getOrgListByParty(String partyId,String partyCode) {
		//先获取到权限规则列表
		List<DrcAuthRule> authRules = getDrcAuthRuleWithOrgType(partyId, partyCode);
		if(authRules == null || authRules.isEmpty()){
			return null;
		}
		//组合参数
		StringBuffer condition = new StringBuffer();
		condition.append(" SELECT * FROM AIMS_BASIC_ORG ");
		condition.append(" WHERE ORG_CODE IN (").append(DrcUtils.buildRuleInSql(authRules)).append(")");
		return orgService.queryOrgListBySql(condition.toString());
	}

	@Override
	public int getOrgCountByParty(String partyId, String partyCode) {
		//先获取到权限规则列表
		List<DrcAuthRule> authRules = getDrcAuthRuleWithOrgType(partyId,partyCode);
		if (authRules == null || authRules.isEmpty()) {
			return 0;
		}
		//组合参数
		StringBuffer condition = new StringBuffer();
		condition.append(" SELECT * FROM AIMS_BASIC_ORG ");
		condition.append(" WHERE ORG_CODE IN (").append(DrcUtils.buildRuleInSql(authRules)).append(")");
		List<AimsBasicOrg> list = orgService.queryOrgListBySql(condition.toString());
		return list == null || list.isEmpty() ? 0 : list.size();
	}

	@Override
	public List<AimsBasicOrg> queryOrg(String partyId, String partyCode,
			String searchStr) {
		//先获取到权限规则列表
//		List<DrcAuthRule> authRules = getDrcAuthRuleWithOrgType(partyId, partyCode);
//		if(authRules == null || authRules.isEmpty()){
//			return new ArrayList<AimsBasicOrg>();
//		}
		//组合参数
		StringBuffer condition = new StringBuffer();
//		condition.append(" SELECT * FROM AIMS_BASIC_ORG ");
//		condition.append(" WHERE ORG_CODE IN (").append(DrcUtils.buildRuleInSql(authRules)).append(")");
//		condition.append(" AND (ORG_CODE LIKE '%").append(searchStr).append("%'");
//		condition.append(" OR ORG_NAME LIKE '%").append(searchStr).append("%'");
//		condition.append(")");
//		condition.append(" SELECT * FROM AIMS_BASIC_ORG ORG ");
//		condition.append(" WHERE ORG_ID IN (");
//		condition.append(" SELECT ORG_ID FROM VDRC_RULE_USER_ORG DRC WHERE DRC.USER_ID = '").append(partyId).append("'");
//		condition.append(" AND (ORG_CODE LIKE '%").append(searchStr).append("%'");
//		condition.append(" OR ORG_NAME LIKE '%").append(searchStr).append("%'");
//		condition.append(" ) ");
//		condition.append(" ) ORDER BY ORG_CODE");
		condition.append(" SELECT * FROM VDRC_RULE_USER_ORG DRC ");
		condition.append(" WHERE DRC.USER_ID = '").append(partyId).append("'");
		condition.append(" AND (ORG_CODE LIKE '%").append(searchStr).append("%'");
		condition.append(" OR ORG_NAME LIKE '%").append(searchStr).append("%'");
		condition.append(" OR FINANCE_BUDGET_CODE LIKE '%").append(searchStr).append("%'");
		condition.append(" ) ");
		condition.append(" ORDER BY ORG_CODE ");
		logger.debug("查询登录单位数sql:" + condition.toString());
		return orgService.queryOrgListBySql(condition.toString());
	}

	@Override
	public List<DrcAuthRule> getDrcAuthRuleList(Condition condition) {
		
		return drcAuthRuleMapper.selectByExample(condition);
	}

	@Override
	public List<AimsBasicOrg> getOrgListByUser(String userCode) {
		StringBuffer sql = new StringBuffer();
//		sql.append(" SELECT * FROM AIMS_BASIC_ORG ORG ");
//		sql.append(" WHERE ORG_ID IN (");
//		sql.append(" SELECT ORG_ID FROM VDRC_RULE_USER_ORG DRC WHERE DRC.USER_CODE = '").append(userCode).append("'");
//		sql.append(" ) ORDER BY ORG_CODE");
		sql.append(" SELECT * FROM ");
		sql.append(" VDRC_RULE_USER_ORG DRC ");
		sql.append(" WHERE DRC.USER_CODE = '").append(userCode).append("'");
		sql.append(" ORDER BY DRC.ORG_CODE ");
		return orgService.queryOrgListBySql(sql.toString());
	}

	@Override
	public int getOrgCountByUserCode(String userCode) {
		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT COUNT(1) CNT FROM VDRC_RULE_USER_ORG WHERE USER_CODE = '").append(userCode).append("'");
		List<Map<String,Object>> list = mapper.queryCommon(sql.toString(),new HashMap<String,Object>()); 
		return (list == null || list.isEmpty()) ? 0 : MapUtilsExt.getInteger(list.get(0), "CNT");
	}


}