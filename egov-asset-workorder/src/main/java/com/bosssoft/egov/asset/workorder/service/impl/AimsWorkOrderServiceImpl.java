
/**
 * 福建博思软件 1997-2018 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Fri Jan 05 11:29:38 CST 2018
 */
package com.bosssoft.egov.asset.workorder.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.common.util.NumberUtilsExt;
import com.bosssoft.egov.asset.common.util.StringUtilsExt;
import com.bosssoft.egov.asset.runtime.User;
import com.bosssoft.egov.asset.runtime.web.context.AppContext;
import com.bosssoft.egov.asset.workorder.entity.AimsWorkOrder;
import com.bosssoft.egov.asset.workorder.mapper.AimsWorkOrderMapper;
import com.bosssoft.egov.asset.workorder.service.AimsWorkOrderService;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;
import com.bosssoft.platform.persistence.entity.Condition;


/**
 * 类说明: AimsWorkOrderService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2018-01-05   Win　　　新建
 * </pre>
 */
@Service
public class AimsWorkOrderServiceImpl implements AimsWorkOrderService {

	private static Logger logger = LoggerFactory.getLogger(AimsWorkOrderServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private AimsWorkOrderMapper aimsWorkOrderMapper;
	
	/**
	 *
	 * @param aimsWorkOrder
	 * @
	 */
	public void addAimsWorkOrder(AimsWorkOrder aimsWorkOrder)  {
		aimsWorkOrderMapper.insert(aimsWorkOrder);
	}

	/**
	 *
	 * @param aimsWorkOrder
	 * @
	 */
	public void delAimsWorkOrder(AimsWorkOrder aimsWorkOrder)  {
		aimsWorkOrderMapper.deleteByPrimaryKey(aimsWorkOrder);
	}

	/**
	 *
	 * @param aimsWorkOrder
	 * @
	 */
	public void updateAimsWorkOrder(AimsWorkOrder aimsWorkOrder)  {
		aimsWorkOrderMapper.updateByPrimaryKeySelective(aimsWorkOrder);		
	}

	/**
	 *
	 * @param aimsWorkOrder
	 * @retrun
	 * @
	 */
	public AimsWorkOrder getAimsWorkOrderList(AimsWorkOrder aimsWorkOrder)  {
		return aimsWorkOrderMapper.selectByPrimaryKey(aimsWorkOrder);
	}

	/**
	 *
	 * @param searcher
	 * @param pageInfo
	 * @retrun
	 * @
	 */
	public Page<AimsWorkOrder> queryAimsWorkOrderPage(Searcher searcher,Page<AimsWorkOrder> page)  {
		return aimsWorkOrderMapper.queryAimsWorkOrderPage(searcher, page);
	}
	//新批删除
	public int batchDelete(AimsWorkOrder aimsWorkOrder)  {
		Integer count=0;
		if(aimsWorkOrder.getBillId() == null){
			return count;
		}
		Long billId=aimsWorkOrder.getBillId();					
		Condition condition = new Condition(AimsWorkOrder.class);
		condition.createCriteria().andCondition("bill_id=", billId); 
		aimsWorkOrderMapper.deleteByExample(condition);				
		count=1;	
		return count;
	}
	//新增
	public void addRecord(AimsWorkOrder aimsWorkOrder)  {	
		Long billId=aimsWorkOrder.getBillId();
		//先删除
		Condition condition = new Condition(AimsWorkOrder.class);
		condition.createCriteria().andCondition("bill_id=", billId); 
		aimsWorkOrderMapper.deleteByExample(condition);	
		aimsWorkOrderMapper.insertSelective(aimsWorkOrder);	
	  }
}