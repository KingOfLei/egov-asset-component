/*******************************************************************************
 * 福建博思软件1997-2017 版权所有
 * 
 * Auto generated by Bosssoft Studio version 1.0 beta
 * 2018年1月26日下午3:14:16
 *******************************************************************************/
package com.bosssoft.egov.asset.skin.cache;

import java.text.MessageFormat;
import java.util.Comparator;
import java.util.Map;
import java.util.TreeMap;

import com.bosssoft.egov.asset.skin.entiry.AssetSkinCfg;
import com.bosssoft.platform.cache.CacheConfigParser;
import com.bosssoft.platform.cache.CacheFactory;
import com.bosssoft.platform.cache.api.Cache;
import com.bosssoft.platform.cache.api.CacheProperty;

/**
 * @ClassName	类名：AssetSkinCacheManager.java
 * @Description	功能说明：皮肤缓存管理
 * <pre>
 * @date		创建日期：2018年1月26日
 * @author		创建人：chenzhibin
 * @version		版本号：V1.0
 * <pre>
 *-------------------修订记录---------------------
 */
public class AssetSkinCacheManager {

	private static final String CACHE_NAME = "EgovAssetSkinCache";
	
	private static final String SKIN_PATTERN = "SKIN_CACHE::{0}";
	
	private static AssetSkinCacheManager INSTANCE;
	
	/**
	 * 皮肤缓存列表
	 */
	private TreeMap<String, Cache> skinCaches = new TreeMap<String, Cache>(
		new Comparator<String>() {
			@Override
			public int compare(String o1, String o2) {
				return o1.compareTo(o2);
			}
		}
	);
	
	/**
	 * <p>功能说明：获取皮肤管理单例对象
	 * </p>
	 * <p>参数说明：
	 * @return
	 * </p>
	 *
	 * @date	创建时间：2018年1月26日
	 * @author	作者：chenzhibin
	 */
	public static synchronized AssetSkinCacheManager getInstance(){
		if(INSTANCE == null){
			INSTANCE = new AssetSkinCacheManager();
		}
		return INSTANCE;
	}
	
	public AssetSkinCacheManager(){
		String[] cacheNames = CacheConfigParser.getInstance().getCacheNames();
		for(String cacheName : cacheNames){
			if(cacheName.equals(CACHE_NAME)){
				Cache cache = CacheFactory.getInstance().findCache(cacheName);
				CacheProperty cacheConfig = cache.getCacheConfig();
				skinCaches.put(cacheConfig.getPriority() + cacheName, cache);
			}
		}
	}
	
	/**
	 * <p>功能说明：获取当前用户皮肤配置
	 * </p>
	 * <p>参数说明：
	 * @param skin
	 * @return
	 * </p>
	 *
	 * @date	创建时间：2018年1月26日
	 * @author	作者：chenzhibin
	 */
	public AssetSkinCfg getSkinCfg(AssetSkinCfg skin){
		for(Map.Entry<String, Cache> cache : skinCaches.entrySet()){
			return (AssetSkinCfg) cache.getValue().get(buildKey(skin));
		}
		return null;
	}
	
	/**
	 * <p>功能说明：添加用户系统皮肤配置
	 * </p>
	 * <p>参数说明：
	 * @param skin
	 * </p>
	 *
	 * @date	创建时间：2018年1月26日
	 * @author	作者：chenzhibin
	 */
	public void putSkinCfg(AssetSkinCfg skin){
		for(Map.Entry<String, Cache> cache : skinCaches.entrySet()){
			cache.getValue().put(buildKey(skin), skin);
		}
	}
	
	/**
	 * <p>功能说明：删除用户皮肤配置
	 * </p>
	 * <p>参数说明：
	 * @param skin
	 * @return
	 * </p>
	 *
	 * @date	创建时间：2018年1月26日
	 * @author	作者：chenzhibin
	 */
	public void removeSkinCfg(AssetSkinCfg skin){
		for(Map.Entry<String, Cache> cache : skinCaches.entrySet()){
			cache.getValue().remove(buildKey(skin));
		}
	}
	
	/**
	 * <p>功能说明：包装key值
	 * </p>
	 * <p>参数说明：
	 * @param skin
	 * @return
	 * </p>
	 *
	 * @date	创建时间：2018年1月26日
	 * @author	作者：chenzhibin
	 */
	private String buildKey(AssetSkinCfg skin){
		return MessageFormat.format(SKIN_PATTERN, skin.getUserCode());
	}
}
