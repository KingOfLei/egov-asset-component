/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Wed May 31 13:54:51 CST 2017
 */
package com.bosssoft.egov.asset.card.controller.basic;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.bosssoft.egov.asset.card.entity.basic.AssetAttachCardPic;
import com.bosssoft.egov.asset.card.service.basic.AssetAttachCardPicService;
import com.bosssoft.egov.asset.common.PropertiesHelper;
import com.bosssoft.egov.asset.common.util.DateUtilsExt;
import com.bosssoft.egov.asset.common.util.FileUtilsExt;
import com.bosssoft.egov.asset.common.util.IOUtilsExt;
import com.bosssoft.egov.asset.common.util.JsonUtilsExt;
import com.bosssoft.egov.asset.common.util.PathUtil;
import com.bosssoft.egov.asset.common.util.StringUtilsExt;
import com.bosssoft.egov.asset.log.IdGen;
import com.bosssoft.egov.asset.log.annotations.Operation;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;
import com.bosssoft.platform.runtime.exception.BusinessException;
import com.bosssoft.platform.runtime.spi.User;
import com.bosssoft.platform.runtime.web.binding.annotation.AjaxResponseBody;
import com.bosssoft.platform.runtime.web.context.WebApplicationContext;
import com.bosssoft.platform.runtime.web.response.AjaxResult;
import com.bosssoft.platform.runtime.web.response.GridData;
import com.bosssoft.platform.runtime.web.response.PageResult;

@Controller
@RequestMapping(value="card/pic/",name="AssetAttachCardPic")
public class AssetAttachCardPicController {

	@Autowired
	private AssetAttachCardPicService cardPicService;

	private static final String SEPARATOR = File.separator;
	
	/**
     * 图片上传页面
	 */
    @RequestMapping(value = "showUpload.do",name="图片上传页面")
    @Operation(comment="显示卡片图片上传页面")
    public String showUpload(AssetAttachCardPic cardPic,Model model) {
    	 
    	model.addAttribute("cardPic", cardPic);
    	
        return "egov/asset/card/utils/upload";
    }
    
   /**
     * 新增
     * @param assetAttachCardPic 新增信息
	 */
    @RequestMapping(value = "doInsert.do",name="AssetAttachCardPic保存",method=RequestMethod.POST)
    @AjaxResponseBody
    public void doInsert(AssetAttachCardPic assetAttachCardPic)  {
      	cardPicService.addAssetAttachCardPic(assetAttachCardPic);
    }
    
   /**
     * 修改
     * @param assetAttachCardPic 修改信息
	 */
    @RequestMapping(value = "doUpdate.do",name="AssetAttachCardPic修改", method = RequestMethod.POST)
    @AjaxResponseBody
    public void doUpdate(AssetAttachCardPic assetAttachCardPic)  {
		cardPicService.updateAssetAttachCardPic(assetAttachCardPic);
    }
    
    /**
     * 删除
     * @param assetAttachCardPic 删除条件
	 */
	 @RequestMapping(value = "doDelete.do",name="AssetAttachCardPic删除" ,method = RequestMethod.POST)
	 @AjaxResponseBody
	 public void doDelete(AssetAttachCardPic assetAttachCardPic)  {
		 
		cardPicService.delAssetAttachCardPic(assetAttachCardPic);
		
	 }
	 /**
     * 删除
     * @param assetAttachCardPic 删除条件
	 */
	 @RequestMapping(value = "doBatchDel.do",name="批量删除" ,method = RequestMethod.POST)
	 @AjaxResponseBody
	 public AjaxResult doBatchDel(List<AssetAttachCardPic> cardPicList)  {
		 
		cardPicService.doBatchDel(cardPicList);
		
		return AjaxResult.success(cardPicList);
	 }
	 /**
	  * 修改图片文字说明
	  * @param assetAttachCardPic
	  */
	 @RequestMapping(value = "updateRemark.do",name="图片文字说明修改" ,method = RequestMethod.POST)
	 @AjaxResponseBody
	 public AjaxResult updateRemark(AssetAttachCardPic cardPic)  {
		 
		 cardPicService.updateRemark(cardPic);
		 
		 
		 return AjaxResult.success("修改成功！");
	 }
	   /**
     * 获取单条记录
     * @param  assetAttachCardPic 条件
	 */
	 @RequestMapping(value=" getAssetAttachCardPic")
	 @AjaxResponseBody
	 public AssetAttachCardPic getAssetAttachCardPic(AssetAttachCardPic assetAttachCardPic) {
		return null;
	}
	 
	 /**
     * 获取列表(upload窗口)
     * @param  assetAttachCardPic 条件
	 */
	 @RequestMapping(value="getAssetAttachCardPicList.do",name="AssetAttachCardPic查询列表")
	 @AjaxResponseBody
	 public List<AssetAttachCardPic> getAssetAttachCardPicList(AssetAttachCardPic cardPic) {
		 List<AssetAttachCardPic> cardPics = new ArrayList<AssetAttachCardPic>(); 
		 //cyx-20180227 图片列表获取 上传的图片要随卡片业务走 保存了方能显示
		 cardPics = cardPicService.getPreAssetCardPicList(cardPic);
		 
		 if (cardPics == null || cardPics.size() == 0) {
			cardPics = new ArrayList<AssetAttachCardPic>();
		}
		 
		return cardPics;
		
	}
	 
	 /**
     * 获取列表 (图片页面上的轮播控件)
     * @param  assetAttachCardPic 条件
	 */
	 @RequestMapping(value="getCardPics.do",name="获取图片列表")
	 @AjaxResponseBody
	 public List<Map<String, String>> getCardPics(AssetAttachCardPic cardPic) {
		 List<Map<String, String>> pics = new ArrayList<Map<String, String>>(); 
		 String path = cardPicService.filePath();
		 //cyx-20180227 图片列表获取 
		 List<AssetAttachCardPic> cardPics = cardPicService.getPreAssetCardPicList(cardPic);
	 	 if(!path.isEmpty() && cardPics != null && cardPics.size() > 0 ){
	 		for(AssetAttachCardPic pic : cardPics){
	 			Map<String, String> map = new HashMap<String,String>();
	 			String url = "card/pic/viewPic.do?bizId="+pic.getBizId()+"&attachId="+pic.getAttachId();
	 			map.put("src", url);
	 			map.put("title", pic.getRemark());
	 			pics.add(map);
	 		}
	 	}
		 
		return pics;
		
	}
	 
	 /**
     * 获取列表 卡片视图上的图片获取
     * @param  assetAttachCardPic 条件
     * 
	 */
	 @RequestMapping(value="getCardPicList.do",name="获取图片列表")
	 @AjaxResponseBody
	 public List<Map<String,String>> getCardPicList(AssetAttachCardPic cardPic) {
		 List<Map<String,String>> pics = new ArrayList<Map<String,String>>(); 
		 String path = cardPicService.filePath();
		 //cyx-20180227 获取图片列表 
		 List<AssetAttachCardPic> cardPics = cardPicService.getAssetAttachCardPicList(cardPic);
	 	if(!path.isEmpty() && cardPics != null && cardPics.size() > 0 ){
	 		for(AssetAttachCardPic pic : cardPics){
	 			Map<String,String> _pic = new HashMap<String,String>();
	 			String url = "card/pic/viewPic.do?bizId="+pic.getBizId()+"&attachId="+pic.getAttachId();
	 			_pic.put("src", url);
	 			_pic.put("title", pic.getRemark());
	 			pics.add(_pic);
	 		}
	 	}
		 
		return pics;
		
	}
	 
	 /**
     * 获取分页
     * @param searcher 查询条件
     * @param page 分页信息
	 */
	 @RequestMapping(value="queryCardPicPage.do",name="AssetAttachCardPic分页查询")
	 @AjaxResponseBody
	 public  GridData queryAssetAttachCardPicPage(Searcher searcher, Page<AssetAttachCardPic> page,@RequestParam("bizId")String bizId) {
		
		 String condition = "BIZ_ID = "+ bizId + " AND STATUS = 1 AND BIZ_STATUS = 999999 ";
		 
		 return new GridData(new PageResult<AssetAttachCardPic>(cardPicService.queryAssetAttachCardPicPage(searcher, page,condition)));

	}
	 
	 
	 @RequestMapping(value="upload.do",name="图片上传")
	 @AjaxResponseBody
	 public void upload(@RequestParam MultipartFile file,HttpServletResponse response,
			 String bizId,String bizType,String remark ) throws IOException {
		 if(file.isEmpty()){
	    		throw new BusinessException("上传图片不能为空！");
		 }
	 try{
		 //当前登录用户
		 User user = WebApplicationContext.getContext().getCurrentUser();
		 AssetAttachCardPic picInfo = new AssetAttachCardPic();
		 picInfo.setAttachId(IdGen.newWKID());
		 picInfo.setAttachName(file.getOriginalFilename());
		 picInfo.setFileSize(file.getSize());
		 picInfo.setContentType(FileUtilsExt.getFileType(file.getOriginalFilename()));
		 picInfo.setBizType(bizType);
		 picInfo.setBizId(bizId);
		 picInfo.setRemark(remark);
		 picInfo.setAppId(WebApplicationContext.getContext().getAppID());
		 picInfo.setCreateDate(new Date());
		 picInfo.setUpdateDate(DateUtilsExt.getNowDateTime());
		 picInfo.setDefaultStatus("1");
		 picInfo.setStatus(1);
		 picInfo.setBizStatus(1);
		 picInfo.setBizStatusName("暂存");
		 picInfo.setCreatorIp(WebApplicationContext.getContext().getWebRequestContext().getRemoteAddress());
		 if(user != null) {
			 picInfo.setCreator(StringUtilsExt.join(new String[]{user.getUserCode(),user.getUserName()}," "));
		 }
		 cardPicService.saveCardPic(picInfo, file.getInputStream(),file.getBytes());		 

		 response.setContentType("text/html;charset=UTF-8");
		 response.getOutputStream().write(JsonUtilsExt.toJson(picInfo).getBytes());
	
	 }catch (Exception e){
	 	 e.printStackTrace();
		 response.getOutputStream().write("上传失败！".getBytes());
		 }
	
	 }
	 
	 @RequestMapping(value="download.do",name="图片下载")
	 @AjaxResponseBody
	 public void download(AssetAttachCardPic cardPic,HttpServletResponse response) throws IOException {
		 	AssetAttachCardPic fileInfo = cardPicService.queryOneCardPicFile(cardPic);
		 	if(fileInfo == null ){
		 		throw new BusinessException("P404","图片未找到");
		 	}
			response.setContentType(fileInfo.getContentType());
			response.setCharacterEncoding("GBK");
			OutputStream os = null;
			try {
				response.setHeader("Content-disposition","attachment; filename=" + new String(fileInfo.getAttachName().getBytes("GBK"),"ISO-8859-1"));
				response.setHeader("Content-Length",Long.toString(fileInfo.getFileSize()));
				
				InputStream is = cardPicService.downloadPic(fileInfo);
				
				os = response.getOutputStream();
				IOUtilsExt.copy(is, os);
				response.flushBuffer();
				is.close();
				os.close();
			} catch (Exception e) {
				throw new BusinessException("P404","图片下载失败");
			}
	
	 }
	 
	 /**
	  * 
	  * <p>函数名称：   viewPic     </p>
	  * <p>功能说明： 预览图片
	  *
	  * </p>
	  *<p>参数说明：</p>
	  * @param cardPic 图片信息
	  * @param response 请求参数
	  * @param thumb 是否缩略图 默认都是缩略图
	  * @throws IOException
	  *
	  * @date   创建时间：2017年7月3日
	  * @author 作者：cyx
	  */
	 @RequestMapping(value="viewPic.do",name="图片浏览")
	 @AjaxResponseBody
	 public void viewPic(AssetAttachCardPic cardPic, HttpServletResponse response,String thumb) throws IOException {
		AssetAttachCardPic fileInfo = cardPicService.queryOneCardPicFile(cardPic);
		String path = cardPicService.filePath();
	 	if(fileInfo == null || path.isEmpty()){
	 		throw new BusinessException("P404","图片未找到");
	 	}else{
			boolean _thumb = "false".equals(thumb) ? false : true;
	 		InputStream fis = cardPicService.downloadPic(fileInfo, _thumb);
	 		if(fis == null && "true".equals(PropertiesHelper.getString("defaultPic.enable"))){
	 			//判断图片是否存在不存在直接替换成默认图片 20170701 xds 
	 			String filePath = PathUtil.getWebRootPath() + File.separator +  PropertiesHelper.getProperty("defaultPic.src");
		        fis = new FileInputStream(filePath);		 
	 		}
	 		OutputStream os = null;
	 		try {
	 			int i = fis.available();
		 		//存放图片字节流
		 		byte[] picBuff = new byte[i];
		 		fis.read(picBuff);
		 		//输出图片字节流
		 		response.setContentType("images/*");//输出图片类型
		 		os = response.getOutputStream();
		 		os.write(picBuff);
		 		
		 		//关闭流
		 		//fis.close();
		 		//os.close();
			} catch (Exception e) {
				throw new BusinessException("P404","图片加载失败");
			} finally {
				IOUtilsExt.closeQuietly(fis);
				IOUtilsExt.closeQuietly(os);
			}
	 	}
	 }
	 /**
	  * 
	  * <p>函数名称： revertUnconfirmPics      </p>
	  * <p>功能说明： //恢复图片操作(删除未保存的图片以及恢复未删除的图片)
	  *
	  * </p>
	  *<p>参数说明：</p>
	  * @param bizId
	  *
	  * @date   创建时间：2018年3月23日
	  * @author 作者：cyx
	  */
	 @RequestMapping(value="revertUnconfirmPics.do",name="图片revert")
	 @AjaxResponseBody
	 public AjaxResult revertUnconfirmPics(String bizId){
		 if(!"".equals(bizId)){
			 cardPicService.revertUnconfirmPics(bizId);
		 }else{
			 return AjaxResult.error("bizId can not empty");
		 }
		 return AjaxResult.success("revert pics successfully");
	 }
	 
}