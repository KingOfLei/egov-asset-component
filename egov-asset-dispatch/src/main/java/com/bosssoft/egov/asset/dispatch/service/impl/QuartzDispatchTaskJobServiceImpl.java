package com.bosssoft.egov.asset.dispatch.service.impl;

/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Sun Jan 22 17:22:00 CST 2017
 */

import java.text.ParseException;
import java.util.List;

import org.quartz.Job;
import org.quartz.SchedulerException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.dispatch.DispatchManger;
import com.bosssoft.egov.asset.dispatch.entity.AssetDispatchMonitorTask;
import com.bosssoft.egov.asset.dispatch.service.AssetDispatchMonitorTaskService;
import com.bosssoft.egov.asset.dispatch.service.QuartzDispatchTaskJobService;
import com.bosssoft.egov.asset.runtime.web.context.AppContext;
import com.bosssoft.platform.common.utils.StringUtils;
import com.bosssoft.platform.runtime.exception.BusinessException;

/**
 * 类说明: AssetDispatchJobService接口实现类.
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-01-22   Administrator　　　新建
 * </pre>
 */
@Service
@SuppressWarnings("static-access")
public class QuartzDispatchTaskJobServiceImpl implements QuartzDispatchTaskJobService {

	@Autowired
	private AssetDispatchMonitorTaskService assetDispatchMonitorTaskService;
	
	@Autowired
	private DispatchManger jobManager;

	
	private void beforeCheck(String taskId){
		if(StringUtils.isNullOrBlank(taskId)){
			throw new BusinessException("任务ID不能为空！");
		}
		AssetDispatchMonitorTask assetDispatchMonitorTask = assetDispatchMonitorTaskService.queryOneByPrimaryKey(taskId);
		if(assetDispatchMonitorTask == null){
			throw new BusinessException("该任务不存在，请正确输入！");
		}
		if("0".equals(assetDispatchMonitorTask.getTaskstate())){
			throw new BusinessException("该任务不可用！");
		}
		String beanName = assetDispatchMonitorTask.getTaskobj();
		if(StringUtils.isNullOrBlank(beanName)){
			throw new BusinessException("任务job名称不能为空！");
		}
		
		Class<?> taskBean;
		try {
			taskBean = Class.forName(beanName);
			if (!(taskBean.newInstance() instanceof Job)) {
				throw new BusinessException("获得的类未继承Job类，无法进行任务操作");
			}			
		} catch (Exception e) {
			throw new BusinessException("无此Job任务!");
		}
//		Object job = AppContext.getAppContext().getBeanContext().getBean(beanName);
		
	}
	
	public void addTaskJob(String taskId) {
		this.beforeCheck(taskId);
		AssetDispatchMonitorTask assetDispatchMonitorTask = assetDispatchMonitorTaskService.queryOneByPrimaryKey(taskId);
		Class<? extends Job> taskBean;
		try {
			taskBean = Class.forName(assetDispatchMonitorTask.getTaskobj()).asSubclass(Job.class);
			AppContext.getAppContext().getBeanContext().getAutowireCapableBeanFactory().autowireBean(taskBean.newInstance());
			//taskid做每一个job的标识符
			jobManager.addJob(assetDispatchMonitorTask.getTaskid(), taskBean, assetDispatchMonitorTask.getTaskquartz());

		} catch (Exception e) {
			throw new BusinessException("无此Job任务!");
		}
	}
	
	public void addAllEnableJob(){
		AssetDispatchMonitorTask assetDispatchMonitorTask = new AssetDispatchMonitorTask();
		assetDispatchMonitorTask.setTaskid(null);
		assetDispatchMonitorTask.setTaskcode(null);
		assetDispatchMonitorTask.setTaskstate("1");
		List<AssetDispatchMonitorTask> listTaskJob = assetDispatchMonitorTaskService.getAssetDispatchMonitorTaskList(assetDispatchMonitorTask);
		for (AssetDispatchMonitorTask assetDispatchMonitorTask2 : listTaskJob) {
			Class<? extends Job> taskBean;
			try {
				taskBean = Class.forName(assetDispatchMonitorTask2.getTaskobj()).asSubclass(Job.class);
				AppContext.getAppContext().getBeanContext().getAutowireCapableBeanFactory().autowireBean(taskBean.newInstance());
				//taskid做每一个job的标识符
				jobManager.addJob(assetDispatchMonitorTask2.getTaskid(), taskBean, assetDispatchMonitorTask2.getTaskquartz());

			} catch (Exception e) {
				throw new BusinessException("无此Job任务!");
			}
		}
		
	}

	public void removeTaskJob(String taskId) {
		this.beforeCheck(taskId);
		AssetDispatchMonitorTask task = assetDispatchMonitorTaskService.queryOneByPrimaryKey(taskId);
		try {
			jobManager.removeJob(task.getTaskid());
		} catch (SchedulerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void modifyTaskJob(AssetDispatchMonitorTask task) {
		this.beforeCheck(task.getTaskid());
		try {
			jobManager.modifyJobTime(task.getTaskid(), task.getTaskquartz());
		} catch (SchedulerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// TODO Auto-generated method stub

	}

	public void stopTaskJob(String taskId) {
		this.beforeCheck(taskId);
		AssetDispatchMonitorTask task = assetDispatchMonitorTaskService.queryOneByPrimaryKey(taskId);
		try {
			jobManager.pauseJob(task.getTaskid());
		} catch (SchedulerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void resumeTaskJob(String taskId) {
		this.beforeCheck(taskId);
		AssetDispatchMonitorTask task = assetDispatchMonitorTaskService.queryOneByPrimaryKey(taskId);
		try {
			jobManager.resumeJob(task.getTaskid());
		} catch (SchedulerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}