
/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Fri Sep 22 23:59:59 CST 2017
 */
package com.bosssoft.asset.etl.service;

import java.io.File;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.asset.etl.core.EtlConst;
import com.bosssoft.asset.etl.entity.AssetEtlExportTask;
import com.bosssoft.asset.etl.mapper.AssetEtlExportTaskMapper;
import com.bosssoft.egov.asset.common.util.StringUtilsExt;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;


/**
 * 类说明: AssetEtlExportTaskService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-09-23   xiedeshou　　　新建
 * </pre>
 */
@Service
public class AssetEtlExportTaskServiceImpl implements AssetEtlExportTaskService {

	private static Logger logger = LoggerFactory.getLogger(AssetEtlExportTaskServiceImpl.class);

	@Autowired
	private AssetEtlExportTaskMapper assetEtlExportTaskMapper;
	
	/**
	 *
	 * @param assetEtlExportTask
	 */
	public void addAssetEtlExportTask(AssetEtlExportTask assetEtlExportTask)  {
		assetEtlExportTaskMapper.insertSelective(assetEtlExportTask);
	}

	/**
	 *
	 * @param assetEtlExportTask
	 */
	public void delAssetEtlExportTask(AssetEtlExportTask assetEtlExportTask)  {
		if(assetEtlExportTask == null || assetEtlExportTask.getId() == null){
			throw new RuntimeException("任务【" + assetEtlExportTask.getConfigName() + "】不存在！");
		}
		AssetEtlExportTask task = assetEtlExportTaskMapper.selectByPrimaryKey(assetEtlExportTask);
		// 删除任务对应的文件数据
		if(task != null && !StringUtilsExt.isBlank(task.getFilePath())){
			File file = new File(EtlConst.getExportTaskPathDirectory() + task.getFilePath());
			file.delete();
			logger.debug("成功删除任务文件...{}", task.getFileName() + StringUtilsExt.isEmpty(task.getFileType(), "xlsx"));
		}
		assetEtlExportTaskMapper.deleteByPrimaryKey(assetEtlExportTask);
	}

	/**
	 *
	 * @param assetEtlExportTask
	 */
	public void updateAssetEtlExportTask(AssetEtlExportTask assetEtlExportTask)  {
		assetEtlExportTaskMapper.updateByPrimaryKeySelective(assetEtlExportTask);
	}

	/**
	 *
	 * @param assetEtlExportTask
	 * @retrun
	 */
	public List<AssetEtlExportTask> getAssetEtlExportTaskList(AssetEtlExportTask assetEtlExportTask)  {
		return assetEtlExportTaskMapper.select(assetEtlExportTask);
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<AssetEtlExportTask> queryAssetEtlExportTaskPage(Searcher searcher, Page<AssetEtlExportTask> page)  {
		return assetEtlExportTaskMapper.queryAssetEtlExportTaskPage(searcher, page);
	}

	@Override
	public AssetEtlExportTask getAssetEtlExportTask(Long id) {
		return assetEtlExportTaskMapper.selectByPrimaryKey(id);
	}

	@Override
	public int deleteTimeoutExportTask(String time) {
		return assetEtlExportTaskMapper.deleteTimeoutExportTask(time);
	}
	
	@Override
	public int clearWaitOrExecutingTask() {
		return assetEtlExportTaskMapper.clearWaitOrExecutingTask();
	}
}