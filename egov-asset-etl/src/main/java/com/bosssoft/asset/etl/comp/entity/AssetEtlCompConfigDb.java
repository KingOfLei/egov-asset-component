/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Tue Sep 12 14:51:01 CST 2017
 */
package com.bosssoft.asset.etl.comp.entity;
import javax.persistence.Column;
import javax.persistence.Table;

import com.bosssoft.egov.asset.basic.entity.Entity;

/**
 * 数据库输入输出配置对象.
 * 
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-09-12   xiedeshou　　　新建
 * </pre>
 */
 @Table(name = "ASSET_ETL_COMP_CONFIG_DB")
public class AssetEtlCompConfigDb extends Entity {

	private static final long serialVersionUID = 170912145829427L;
	
	// Fields
	
	/**
	 * ID.
	 */
    @Column(name = "ID")
	private Long id;
	/**
	 * 管理配置表id.
	 */
    @Column(name = "CONFIG_ID")
	private Long configId;
	/**
	 * 输入还是输出.
	 */
    @Column(name = "BIZ_TYPE")
	private String bizType;
	/**
	 * 数据库类型:Oracle、MySQL、SQLite、MSSQLNative等.
	 */
    @Column(name = "DB_TYPE")
	private String dbType;
	/**
	 * 数据库识别名称.
	 */
    @Column(name = "DB_NAME")
	private String dbName;
	/**
	 * host值.
	 */
    @Column(name = "DB_HOST")
	private String dbHost;
	/**
	 * 实例名称如 ORCL.
	 */
    @Column(name = "DB_INST")
	private String dbInst;
	/**
	 * 端口号.
	 */
    @Column(name = "DB_PORT")
	private String dbPort;
	/**
	 * 用户名.
	 */
    @Column(name = "DB_USER")
	private String dbUser;
	/**
	 * 密码.
	 */
    @Column(name = "DB_PASS")
	private String dbPass;
	/**
	 * 输入sql语句.
	 */
    @Column(name = "INPUT_SQL")
	private String inputSql;
	/**
	 * 输入记录限制默认0 不限制.
	 */
    @Column(name = "INPUT_ROW_LIMT")
	private Integer inputRowLimt;
	/**
	 * 输出表名.
	 */
    @Column(name = "OUTPUT_TABLE")
	private String outputTable;
	/**
	 * 表不存在时，是否创建.
	 */
    @Column(name = "OUTPUT_CRTTBL")
	private String outputCrttbl;
	/**
	 * 无需入库的字段列表，“|”分割.
	 */
    @Column(name = "OUTPUT_EXCLUDE")
	private String outputExclude;
	/**
	 * 每次提交记录数，不填默认为4000.
	 */
    @Column(name = "OUTPUT_COMMIT")
	private Long outputCommit;
	/**
	 * 状态.
	 */
    @Column(name = "STATUS")
	private String status;
	/**
	 * 备注.
	 */
    @Column(name = "REMARK")
	private String remark;
	
	// Constructors
 
    /** default constructor */
	public AssetEtlCompConfigDb() {
	}

	/**
	 * ID.
	 * @return
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * ID.
	 * @param id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * 管理配置表id.
	 * @return
	 */
	public Long getConfigId() {
		return this.configId;
	}

	/**
	 * 管理配置表id.
	 * @param configId
	 */
	public void setConfigId(Long configId) {
		this.configId = configId;
	}

	/**
	 * 输入还是输出.
	 * @return
	 */
	public String getBizType() {
		return this.bizType;
	}

	/**
	 * 输入还是输出.
	 * @param bizType
	 */
	public void setBizType(String bizType) {
		this.bizType = bizType;
	}

	/**
	 * 数据库类型:Oracle、MySQL、SQLite、MSSQLNative等.
	 * @return
	 */
	public String getDbType() {
		return this.dbType;
	}

	/**
	 * 数据库类型:Oracle、MySQL、SQLite、MSSQLNative等.
	 * @param dbType
	 */
	public void setDbType(String dbType) {
		this.dbType = dbType;
	}

	/**
	 * 数据库识别名称.
	 * @return
	 */
	public String getDbName() {
		return this.dbName;
	}

	/**
	 * 数据库识别名称.
	 * @param dbName
	 */
	public void setDbName(String dbName) {
		this.dbName = dbName;
	}

	/**
	 * host值.
	 * @return
	 */
	public String getDbHost() {
		return this.dbHost;
	}

	/**
	 * host值.
	 * @param dbHost
	 */
	public void setDbHost(String dbHost) {
		this.dbHost = dbHost;
	}

	/**
	 * 实例名称如 ORCL.
	 * @return
	 */
	public String getDbInst() {
		return this.dbInst;
	}

	/**
	 * 实例名称如 ORCL.
	 * @param dbInst
	 */
	public void setDbInst(String dbInst) {
		this.dbInst = dbInst;
	}

	/**
	 * 端口号.
	 * @return
	 */
	public String getDbPort() {
		return this.dbPort;
	}

	/**
	 * 端口号.
	 * @param dbPort
	 */
	public void setDbPort(String dbPort) {
		this.dbPort = dbPort;
	}

	/**
	 * 用户名.
	 * @return
	 */
	public String getDbUser() {
		return this.dbUser;
	}

	/**
	 * 用户名.
	 * @param dbUser
	 */
	public void setDbUser(String dbUser) {
		this.dbUser = dbUser;
	}

	/**
	 * 密码.
	 * @return
	 */
	public String getDbPass() {
		return this.dbPass;
	}

	/**
	 * 密码.
	 * @param dbPass
	 */
	public void setDbPass(String dbPass) {
		this.dbPass = dbPass;
	}

	/**
	 * 输入sql语句.
	 * @return
	 */
	public String getInputSql() {
		return this.inputSql;
	}

	/**
	 * 输入sql语句.
	 * @param inputSql
	 */
	public void setInputSql(String inputSql) {
		this.inputSql = inputSql;
	}

	/**
	 * 输入记录限制默认0 不限制.
	 * @return
	 */
	public Integer getInputRowLimt() {
		return this.inputRowLimt;
	}

	/**
	 * 输入记录限制默认0 不限制.
	 * @param inputRowLimt
	 */
	public void setInputRowLimt(Integer inputRowLimt) {
		this.inputRowLimt = inputRowLimt;
	}

	/**
	 * 输出表名.
	 * @return
	 */
	public String getOutputTable() {
		return this.outputTable;
	}

	/**
	 * 输出表名.
	 * @param outputTable
	 */
	public void setOutputTable(String outputTable) {
		this.outputTable = outputTable;
	}

	/**
	 * 表不存在时，是否创建.
	 * @return
	 */
	public String getOutputCrttbl() {
		return this.outputCrttbl;
	}

	/**
	 * 表不存在时，是否创建.
	 * @param outputCrttbl
	 */
	public void setOutputCrttbl(String outputCrttbl) {
		this.outputCrttbl = outputCrttbl;
	}

	/**
	 * 无需入库的字段列表，“|”分割.
	 * @return
	 */
	public String getOutputExclude() {
		return this.outputExclude;
	}

	/**
	 * 无需入库的字段列表，“|”分割.
	 * @param outputExclude
	 */
	public void setOutputExclude(String outputExclude) {
		this.outputExclude = outputExclude;
	}

	/**
	 * 每次提交记录数，不填默认为4000.
	 * @return
	 */
	public Long getOutputCommit() {
		return this.outputCommit;
	}

	/**
	 * 每次提交记录数，不填默认为4000.
	 * @param outputCommit
	 */
	public void setOutputCommit(Long outputCommit) {
		this.outputCommit = outputCommit;
	}

	/**
	 * 状态.
	 * @return
	 */
	public String getStatus() {
		return this.status;
	}

	/**
	 * 状态.
	 * @param status
	 */
	public void setStatus(String status) {
		this.status = status;
	}

	/**
	 * 备注.
	 * @return
	 */
	public String getRemark() {
		return this.remark;
	}

	/**
	 * 备注.
	 * @param remark
	 */
	public void setRemark(String remark) {
		this.remark = remark;
	}

}