package com.bosssoft.egov.asset.monitor.service;


/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Mon Jan 16 13:10:31 CST 2017
 */

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.common.util.StringUtilsExt;
import com.bosssoft.egov.asset.monitor.entity.FabMonitorEvt;
import com.bosssoft.egov.asset.monitor.entity.FabMonitorRecord;
import com.bosssoft.egov.asset.monitor.entity.FabMonitorRecordDetail;
import com.bosssoft.egov.asset.monitor.entity.FabMonitorRecordUrlortype;
import com.bosssoft.egov.asset.monitor.mapper.FabMonitorRecordMapper;
import com.bosssoft.egov.asset.portal.entity.UserTodoItem;
import com.bosssoft.egov.asset.runtime.User;
import com.bosssoft.platform.common.utils.StringUtils;
import com.bosssoft.platform.common.lang.data.Searcher;


/**
 * 类说明: FabMonitorRecordService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-01-16   jinbiao　　　新建
 * </pre>
 */
@Service
public class FabMonitorRecordToDolistService {

	@Autowired
	private FabMonitorRecordMapper fabMonitorRecordMapper;
	@Autowired
	private FabMonitorModelService fabMonitorModelService;
	@Autowired
	private FabMonitorEvtService fabMonitorEvtService;
	@Autowired
	private MonitorInfoService monitorInfoService;
	@Autowired
	private FabMonitorEvtVersionService fabMonitorEvtVersionService;
	@Autowired
	private FabMonitorRecordDetailService fabMonitorRecordDetailService;
	@Autowired
	private FabMonitorRecordUrlortypeService fabMonitorRecordUrlortypeService;
	
	public List<UserTodoItem> queryTodoList(User user, String type) {
		StringBuffer sql1 = new StringBuffer();
//		type = "BAOFEI1,BAOFEI2";
		if(StringUtils.isNotNullAndBlank(type)){
			String[] types = type.split("\\,");
			sql1.append(" ( ");
			for (int i = 0, len = types.length; i < len; i++) {
				sql1.append(" type = '");
				sql1.append(types[i] + "'");
				if (i < len - 1) {
					sql1.append(" or ");
				}
			}
			sql1.append(" ) ");
		}
		Searcher searcher = new Searcher();
		if(user.currentIsParent()){
			searcher.addCondition("FMCMCODE", user.getOrgCode(), "likes");
		} else{
			searcher.addCondition("FMCMCODE", user.getOrgCode());
		}
//		searcher.addCondition("FISHNDL", 0);
//		searcher.addCondition("fclick", 0);
		List<FabMonitorRecord> list = fabMonitorRecordMapper.queryRecordByType(searcher, sql1.toString());
//		List<FabMonitorRecord> list = fabMonitorRecordMapper.queryList(searcher, null, null);
		
		return this.getToDoItme(list);
	}
	
	private List<UserTodoItem> getToDoItme(List<FabMonitorRecord> list) {
		//用于获取相应的URL以及配置
		List<FabMonitorRecordUrlortype> urlList = new ArrayList<FabMonitorRecordUrlortype>();
		Map<String, FabMonitorRecordUrlortype> urlMap = new HashMap<String, FabMonitorRecordUrlortype>();

		urlList = fabMonitorRecordUrlortypeService.getFabMonitorRecordUrlortypeListAll();
		for (FabMonitorRecordUrlortype fabMonitorRecordUrlortype : urlList) {
			urlMap.put(fabMonitorRecordUrlortype.getTypeCode(), fabMonitorRecordUrlortype);
		}
		List<UserTodoItem> result = new ArrayList<UserTodoItem>();
		List<FabMonitorRecordDetail> allDetail = new ArrayList<FabMonitorRecordDetail>();
		List<String> recordType = new ArrayList<String>();
		for (FabMonitorRecord fabMonitorRecord : list) {
			if(StringUtilsExt.convertNullToString(fabMonitorRecord.getIsResult()).equals("0")){
				String morgCode = fabMonitorRecord.getFmcmcode();
				if(!recordType.contains(fabMonitorRecord.getType())){
					recordType.add(fabMonitorRecord.getType());
					List<FabMonitorRecordDetail> del = fabMonitorRecordDetailService.getDetailsByTypeMorgCode(fabMonitorRecord.getType(), morgCode);
					for (FabMonitorRecordDetail fabMonitorRecordDetail : del) {
						allDetail.add(fabMonitorRecordDetail);
					}
				}
//				String orgCode = fabMonitorRecord.getFomonitorcode();
//				List<FabMonitorRecordDetail> all2Detail = fabMonitorRecordDetailService.getFabMonitorRecordDetailListByMorgCode(morgCode,orgCode);
//				for (FabMonitorRecordDetail fabMonitorRecordDetail : all2Detail) {
//					FabMonitorEvt evt = fabMonitorEvtService.queryOne(fabMonitorRecord.getFevtid());
//					fabMonitorRecordDetail.setParam1(evt.getFevtcode());
//					allDetail.add(fabMonitorRecordDetail);
//				}
			}
		}
		List<String> recordList = new ArrayList<String>();
		List<String> recordCount = new ArrayList<String>();
		for (FabMonitorRecord fabMonitorRecord : list) {
			String type = fabMonitorRecord.getType();
			//父类或者重要记录标识
			String ptype = fabMonitorRecord.getPtype();
			if(StringUtils.isNotNullAndBlank(ptype)){
				type = ptype;
			}
			type = StringUtilsExt.convertNullToString(type);
			String isResult = StringUtilsExt.convertNullToString(fabMonitorRecord.getIsResult());
			if(isResult.equals("0")){
//				if (!recordList.contains(title)) {
//					recordList.add(title);
//					UserTodoItem userTodoItem = new UserTodoItem();
//					userTodoItem.setCount(1);
//					// HH:mm:ss
//					userTodoItem.setCreatedTime(fabMonitorRecord.getFmntdate() + " " + fabMonitorRecord.getFmnttime());
//					FabMonitorEvt evt = fabMonitorEvtService.queryOne(fabMonitorRecord.getFevtid());
//					String modeId = evt.getFmodelid();
//					FabMonitorModel model = fabMonitorModelService.queryOne(modeId);
//					userTodoItem.setUrl(model.getFurl());
//					userTodoItem.setTitle(title);
//					result.add(userTodoItem);
//				} else {
//					for (int j = 0, length = result.size(); j < length; j++) {
//						if (title.equals(result.get(j).getTitle())) {
//							result.get(j).setCount(result.get(j).getCount() + 1);
//						}
//					}
//				}
			}
			//统计即为结果
			else{
				String recordCountString = StringUtilsExt.convertNullToString(fabMonitorRecord.getType());
				String precordCountString = fabMonitorRecord.getPtype();
				if(StringUtils.isNotNullAndBlank(precordCountString)){
					recordCountString = precordCountString;
				}

				if (!recordCount.contains(recordCountString)) {
					
					recordCount.add(recordCountString);
					UserTodoItem userTodoItem = new UserTodoItem();
					// 如果就是所要的结果的话，总和就是为0
					userTodoItem.setCount(0);
					// HH:mm:ss
					userTodoItem.setCreatedTime(fabMonitorRecord.getFmntdate() + " " + fabMonitorRecord.getFmnttime());
					FabMonitorEvt evt = fabMonitorEvtService.queryOne(fabMonitorRecord.getFevtid());
//					String modeId = evt.getFmodelid();
//					FabMonitorModel model = fabMonitorModelService.queryOne(modeId);
//					userTodoItem.setUrl(model.getFurl());
					FabMonitorRecordUrlortype urlType = urlMap.get(recordCountString);
					String url = "";
					if(urlType != null){
						url = urlType.getUrl();
					}
					userTodoItem.setUrl(url);
					userTodoItem.setTabTitle(urlType.getTypeName());
					String content = fabMonitorRecord.getFmntcont();
					userTodoItem.setTitle(StringUtilsExt.convertNullToString(fabMonitorRecord.getTypeName())+content);
					userTodoItem.setId(fabMonitorRecord.getFid());
					userTodoItem.setType(type);
					userTodoItem.setUrlParam("fevtCode=" + fabMonitorRecord.getFevtcode() + "&orgCode=" + fabMonitorRecord.getFomonitorcode() + "&type=" + fabMonitorRecord.getType() + "&" + fabMonitorRecord.getParam1());					
					result.add(userTodoItem);
				}else{
					for (int j = 0, length = result.size(); j < length; j++) {
						if (recordCountString.equals(result.get(j).getType())) {
							result.get(j).setTitle(result.get(j).getTitle()+","+fabMonitorRecord.getFmntcont());
//							result.get(j).setCount(result.get(j).getCount() + 1);
						}
					}
				}
			}
		}
		for (FabMonitorRecordDetail detail : allDetail) {
			
			String type = detail.getType();
			//父类或者重要记录标识
			String ptype = detail.getPtype();
			if(StringUtils.isNotNullAndBlank(ptype)){
				type = ptype;
			}
				if (!recordList.contains(type)) {
					recordList.add(type);
					UserTodoItem userTodoItem = new UserTodoItem();
					userTodoItem.setCount(1);
					// HH:mm:ss
//					userTodoItem.setCreatedTime(fabMonitorRecord.getFmntdate() + " " + fabMonitorRecord.getFmnttime());
//					FabMonitorEvt evt = fabMonitorEvtService.queryOne(fabMonitorRecord.getFevtid());
//					String modeId = evt.getFmodelid();
//					FabMonitorModel model = fabMonitorModelService.queryOne(modeId);
//					userTodoItem.setUrl(model.getFurl());
//					userTodoItem.setTitle(title);
					userTodoItem.setUrl(detail.getUrl());
					userTodoItem.setTitle(detail.getTypeName());
					userTodoItem.setId(detail.getId());
					userTodoItem.setTabTitle(detail.getTypeName());
					userTodoItem.setType(StringUtilsExt.convertNullToString(type));
					userTodoItem.setUrlParam("fevtCode=" + detail.getParam1() + "&orgCode=" + detail.getMorgCode() + "&type=" + detail.getType() + "&" + detail.getParam2());
//					userTodoItem.setUrlParam(detail.get);
					result.add(userTodoItem);
				} else {
					for (int j = 0, length = result.size(); j < length; j++) {
						if (type.equals(result.get(j).getType())) {
							result.get(j).setCount(result.get(j).getCount() + 1);
						}
					}
				}
		}
		return result;
	}
}