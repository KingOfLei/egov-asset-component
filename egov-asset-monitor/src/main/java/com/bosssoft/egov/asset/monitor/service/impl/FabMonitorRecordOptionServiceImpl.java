package com.bosssoft.egov.asset.monitor.service.impl;


/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Mon Feb 27 09:10:35 CST 2017
 */

import java.util.List;

import com.bosssoft.egov.asset.common.idgenerator.GUID;
import com.bosssoft.egov.asset.monitor.entity.FabMonitorRecordDetail;
import com.bosssoft.egov.asset.monitor.entity.FabMonitorRecordOption;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.monitor.service.FabMonitorRecordOptionService;
import com.bosssoft.egov.asset.monitor.mapper.FabMonitorRecordOptionMapper;
import com.bosssoft.egov.asset.runtime.User;
import com.bosssoft.egov.asset.runtime.web.context.AppContext;


/**
 * 类说明: FabMonitorRecordOptionService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-02-27   jinbiao　　　新建
 * </pre>
 */
@Service
public class FabMonitorRecordOptionServiceImpl implements FabMonitorRecordOptionService {

	private static Logger logger = LoggerFactory.getLogger(FabMonitorRecordOptionServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private FabMonitorRecordOptionMapper fabMonitorRecordOptionMapper;
	
	/**
	 *
	 * @param fabMonitorRecordOption
	 */
	public void addFabMonitorRecordOption(FabMonitorRecordOption fabMonitorRecordOption)  {
		fabMonitorRecordOptionMapper.insert(fabMonitorRecordOption);
	}

	/**
	 *
	 * @param fabMonitorRecordOption
	 */
	public void delFabMonitorRecordOption(FabMonitorRecordOption fabMonitorRecordOption)  {
		fabMonitorRecordOptionMapper.deleteByPrimaryKey(fabMonitorRecordOption);
	}

	/**
	 *
	 * @param fabMonitorRecordOption
	 */
	public void updateFabMonitorRecordOption(FabMonitorRecordOption fabMonitorRecordOption)  {
		fabMonitorRecordOptionMapper.updateByPrimaryKey(fabMonitorRecordOption);
	}

	/**
	 *
	 * @param fabMonitorRecordOption
	 * @retrun
	 */
	public List<FabMonitorRecordOption> getFabMonitorRecordOptionList(FabMonitorRecordOption fabMonitorRecordOption)  {
		return null;
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<FabMonitorRecordOption> queryFabMonitorRecordOptionPage(Searcher searcher, Page<FabMonitorRecordOption> page)  {
		return fabMonitorRecordOptionMapper.queryFabMonitorRecordOptionPage(searcher, page);
	}
	
	public void addOneFocusRecord(FabMonitorRecordDetail detail, User user) {
		FabMonitorRecordOption option = new FabMonitorRecordOption();
		option.setBusId(detail.getBillId());
		option.setTitle(detail.getContent());
		option.setId(GUID.newGUID());
		option.setType(detail.getType());
		option.setTypename(detail.getTypeName());
		option.setUserCode(user.getUserCode());
		fabMonitorRecordOptionMapper.insertSelective(option);
	}

	public void cancelOneFocusRecord(FabMonitorRecordDetail detail, User user) {
		FabMonitorRecordOption option = new FabMonitorRecordOption();
		option.setBusId(detail.getBillId());
		option.setUserCode(user.getUserCode());
		fabMonitorRecordOptionMapper.delete(option);
	}


}