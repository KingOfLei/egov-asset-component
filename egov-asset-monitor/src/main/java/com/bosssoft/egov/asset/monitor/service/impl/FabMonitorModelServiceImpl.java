package com.bosssoft.egov.asset.monitor.service.impl;


/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Mon Jan 16 13:10:18 CST 2017
 */

import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.common.idgenerator.GUID;
import com.bosssoft.egov.asset.common.util.DateUtilsExt;
import com.bosssoft.egov.asset.monitor.entity.AlterTypeConsts;
import com.bosssoft.egov.asset.monitor.entity.DateConsts;
import com.bosssoft.egov.asset.monitor.entity.FabMonitorEvt;
import com.bosssoft.egov.asset.monitor.entity.FabMonitorModel;
import com.bosssoft.egov.asset.monitor.mapper.FabMonitorModelMapper;
import com.bosssoft.egov.asset.monitor.service.FabMonitorEvtService;
import com.bosssoft.egov.asset.monitor.service.FabMonitorModelService;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.type.BDateTime;
import com.bosssoft.platform.common.utils.StringUtils;
import com.bosssoft.platform.common.lang.data.Searcher;
import com.bosssoft.platform.runtime.exception.BusinessException;


/**
 * 类说明: FabMonitorModelService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-01-16   jinbiao　　　新建
 * </pre>
 */
@Service
public class FabMonitorModelServiceImpl implements FabMonitorModelService {

	private static Logger logger = LoggerFactory.getLogger(FabMonitorModelServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private FabMonitorModelMapper fabMonitorModelMapper;
	@Autowired
	private FabMonitorEvtService fabMonitorEvtService;
	 
	/**
	 *
	 * @param fabMonitorModel
	 */
	public void addFabMonitorModel(FabMonitorModel fabMonitorModel)  {

		fabMonitorModel.setFid(GUID.newGUID());
		fabMonitorModel.setFmodelcode(GUID.newGUID());
		fabMonitorModel.setFversion(1l);
		fabMonitorModel.setFopedate(DateUtilsExt.formatDate(new Date(), "yyyy-MM-dd"));
		fabMonitorModel.setFcreatetime(DateUtilsExt.formatDate(new Date(), "yyyy-MM-dd"));
		fabMonitorModel.setFaltercode(AlterTypeConsts.ADD);
		fabMonitorModel.setFupdatetime(DateUtilsExt.formatDate(new Date(), "yyyy-MM-dd"));
		if(StringUtils.isNullOrBlank(fabMonitorModel.getFtype())){
			fabMonitorModel.setFtype("0");
		}
		
		fabMonitorModelMapper.insert(fabMonitorModel);
	}

	/**
	 *
	 * @param fabMonitorModel
	 */
	public void delFabMonitorModel(FabMonitorModel fabMonitorModel) throws BusinessException {
    	if(StringUtils.isNullOrBlank(fabMonitorModel.getFid())){
    		throw new BusinessException("请选择要删除的监控数据模型");
    	}
    	Searcher searcher = new Searcher();
    	searcher.addCondition("FMODELID", fabMonitorModel.getFid());
    	List<FabMonitorEvt> evtList = fabMonitorEvtService.queryList(searcher);
    	if(evtList.size()>0){
    		throw new BusinessException("当前监控数据模型已被使用不能删除");
    	}
		fabMonitorModelMapper.deleteByPrimaryKey(fabMonitorModel);
	}

	/**
	 *
	 * @param fabMonitorModel
	 */
	public void updateFabMonitorModel(FabMonitorModel fabMonitorModel)  throws BusinessException{
		_beforeUpdate(fabMonitorModel);
		fabMonitorModelMapper.updateByPrimaryKey(fabMonitorModel);
	}

	/**
	 * 修改前效验
	 * 
	 * @param param
	 * @param userId
	 * @throws BusinessException
	 */
	private void _beforeUpdate(FabMonitorModel fabMonitorModel) throws BusinessException {
		// 需要服务设置的信息
		this._setModelUpdate(fabMonitorModel);
		// 校验为空和长度
//		_checkFields(fabMonitorModel);
	}
	
	/**
	 * 修改前效验
	 * @param param
	 * @param userId
	 * @throws BusinessException
	 */
	private void _setModelUpdate(FabMonitorModel param) throws BusinessException{
		
		param.setFaltercode(AlterTypeConsts.EDIT);//修改类型
		BDateTime curTime = new BDateTime();
		param.setFupdatetime(curTime.toString(DateConsts.DEFAULT_FORMAT));//最后修改时间
//		param.setFversion(ticketFacadeService.getNextVersionNo());// 版本
	}
	
	/**
	 *
	 * @param fabMonitorModel
	 * @retrun
	 */
	public List<FabMonitorModel> getFabMonitorModelList(FabMonitorModel fabMonitorModel)  {
		fabMonitorModel = new FabMonitorModel();
		List<FabMonitorModel> list = fabMonitorModelMapper.select(fabMonitorModel);
		return list;
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<FabMonitorModel> queryFabMonitorModelPage(Searcher searcher, Page<FabMonitorModel> page)  {
		return fabMonitorModelMapper.queryFabMonitorModelPage(searcher, page);
	}

	public FabMonitorModel queryOne(String modelId){
		return fabMonitorModelMapper.selectByPrimaryKey(modelId);
	}

	public void batchDelFabMonitorModel(List<FabMonitorModel> fabMonitorModels) throws BusinessException{
		for (FabMonitorModel fabMonitorModel : fabMonitorModels) {
			this.delFabMonitorModel(fabMonitorModel);
		}
	}
	
	

}