package com.bosssoft.egov.asset.monitor.service.impl;


/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Wed Feb 22 21:53:38 CST 2017
 */

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.monitor.entity.FabMonitorRecordDetail;
import com.bosssoft.egov.asset.monitor.mapper.FabMonitorRecordDetailMapper;
import com.bosssoft.egov.asset.monitor.service.FabMonitorRecordDetailService;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.persistence.entity.Condition;
import com.bosssoft.platform.common.lang.data.Searcher;


/**
 * 类说明: FabMonitorRecordDetailService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-02-22   jinbiao　　　新建
 * </pre>
 */
@Service
public class FabMonitorRecordDetailServiceImpl implements FabMonitorRecordDetailService {

	private static Logger logger = LoggerFactory.getLogger(FabMonitorRecordDetailServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private FabMonitorRecordDetailMapper fabMonitorRecordDetailMapper;
	
	/**
	 *
	 * @param fabMonitorRecordDetail
	 */
	public void addFabMonitorRecordDetail(FabMonitorRecordDetail fabMonitorRecordDetail)  {
		fabMonitorRecordDetailMapper.insert(fabMonitorRecordDetail);
		
	}

	public void updateFabMonitorRecordDetailByBillId(FabMonitorRecordDetail fabMonitorRecordDetail)  {
		Condition condition = new Condition(FabMonitorRecordDetail.class);
		condition.createCriteria().andEqualTo("billId", fabMonitorRecordDetail.getBillId()).andEqualTo("orgCode",fabMonitorRecordDetail.getOrgCode())
		.andEqualTo("morgCode", fabMonitorRecordDetail.getMorgCode());
		fabMonitorRecordDetailMapper.updateByExampleSelective(fabMonitorRecordDetail, condition);
		//fabMonitorRecordDetailMapper.insert(fabMonitorRecordDetail);
	}
	/**
	 *
	 * @param fabMonitorRecordDetail
	 */
	public void delFabMonitorRecordDetail(FabMonitorRecordDetail fabMonitorRecordDetail)  {
		fabMonitorRecordDetailMapper.deleteByPrimaryKey(fabMonitorRecordDetail);
	}

	/**
	 *
	 * @param fabMonitorRecordDetail
	 */
	public void updateFabMonitorRecordDetail(FabMonitorRecordDetail fabMonitorRecordDetail)  {
		fabMonitorRecordDetailMapper.updateByPrimaryKey(fabMonitorRecordDetail);
	}

	/**
	 *
	 * @param fabMonitorRecordDetail
	 * @retrun
	 */
	public List<FabMonitorRecordDetail> getFabMonitorRecordDetailList(FabMonitorRecordDetail fabMonitorRecordDetail)  {
		return null;
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<FabMonitorRecordDetail> queryFabMonitorRecordDetailPage(Searcher searcher, Page<FabMonitorRecordDetail> page)  {
		return fabMonitorRecordDetailMapper.queryFabMonitorRecordDetailPage(searcher, page);
	}

	public void addFabMonitorRecordDetailNull(FabMonitorRecordDetail fabMonitorRecordDetail) {
		fabMonitorRecordDetail.setClick(0l);
		fabMonitorRecordDetailMapper.insertSelective(fabMonitorRecordDetail);
		
	}
	
	/**
	 *
	 * @param fabMonitorRecordDetail
	 * @retrun
	 */
	public List<FabMonitorRecordDetail> getFabMonitorRecordDetailListByOrgCodeMorgCode(String orgCode,String morgCode)  {
		return fabMonitorRecordDetailMapper.getFabMonitorRecordDetailListByOrgCodeMorgCode(orgCode,morgCode);
	}
	/**
	 *
	 * @param fabMonitorRecordDetail
	 * @retrun
	 */
	public FabMonitorRecordDetail getFabMonitorRecordDetailListByBillIdOrgCodeMorgCode(FabMonitorRecordDetail record) {
		return fabMonitorRecordDetailMapper.getFabMonitorRecordDetailListByBillIdOrgCodeMorgCode(record.getBillId(), record.getOrgCode(), record.getMorgCode());
	}
	/**
	 *
	 * @param fabMonitorRecordDetail
	 * @retrun
	 */
	public void deleteFabMonitorRecordDetailListByBillId(String billId)  {
		fabMonitorRecordDetailMapper.deleteFabMonitorRecordDetailListByBillId(billId);
	}

	public void updateFabMonitorClickByBillId(String billId,String orgCode,String morgCode) {
		FabMonitorRecordDetail detail = fabMonitorRecordDetailMapper.getFabMonitorRecordDetailListByBillIdOrgCodeMorgCode(billId, orgCode, morgCode);
		if(detail.getClick() == 0){
			detail.setClick(detail.getClick()+1);
			fabMonitorRecordDetailMapper.updateByPrimaryKeySelective(detail);
		}
		
	}

	public List<FabMonitorRecordDetail> getFabMonitorRecordDetailListByMorgCode(String morgCodCe,String orgCode) {
		Condition condition = new Condition(FabMonitorRecordDetail.class);
		condition.createCriteria().andEqualTo("morgCode", morgCodCe).andEqualTo("orgCode", orgCode);
		return fabMonitorRecordDetailMapper.selectByExample(condition);
		
	}
	
	public List<FabMonitorRecordDetail> getDetailsByTypeMorgCode(String type,String morgCode){
		FabMonitorRecordDetail record = new FabMonitorRecordDetail();
		record.setType(type);
		record.setMorgCode(morgCode);
		return fabMonitorRecordDetailMapper.select(record);
	}
	
	public void deleteDetailBy3Condition(FabMonitorRecordDetail recordDetail){
		FabMonitorRecordDetail record = new FabMonitorRecordDetail();
		record.setClick(null);
		record.setMorgCode(recordDetail.getMorgCode());
		record.setOrgCode(recordDetail.getOrgCode());
		record.setBillId(recordDetail.getBillId());
		fabMonitorRecordDetailMapper.delete(record);
	}

}