package com.bosssoft.egov.asset.attach.service;
/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Thu Mar 16 20:14:27 CST 2017
 */

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.attach.entity.AssetAttachRemark;
import com.bosssoft.egov.asset.attach.mapper.AssetAttachRemarkMapper;
import com.bosssoft.egov.asset.attach.web.IdGen;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.persistence.entity.Condition;
import com.bosssoft.platform.common.lang.data.Searcher;


/**
 * 类说明: AssetAttachRemarkService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-03-16   Administrator　　　新建
 * </pre>
 */
@Service
public class AssetAttachRemarkServiceImpl implements AssetAttachRemarkService {

	private static Logger logger = LoggerFactory.getLogger(AssetAttachRemarkServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private AssetAttachRemarkMapper assetAttachRemarkMapper;
	
	/**
	 *
	 * @param assetAttachRemark
	 */
	public void addAssetAttachRemark(AssetAttachRemark assetAttachRemark)  {
		//先删除 后插入
		Condition conditon = new Condition(AssetAttachRemark.class);
		conditon.createCriteria().andEqualTo("bizId", assetAttachRemark.getBizId());
		assetAttachRemarkMapper.deleteByExample(conditon);
		assetAttachRemark.setId(IdGen.newWKID());		
		assetAttachRemarkMapper.insert(assetAttachRemark);
	}

	/**
	 *
	 * @param assetAttachRemark
	 */
	public void delAssetAttachRemark(AssetAttachRemark assetAttachRemark)  {
		assetAttachRemarkMapper.deleteByPrimaryKey(assetAttachRemark);
	}

	/**
	 *
	 * @param assetAttachRemark
	 */
	public void updateAssetAttachRemark(AssetAttachRemark assetAttachRemark)  {
		assetAttachRemarkMapper.updateByPrimaryKey(assetAttachRemark);
	}

	/**
	 *
	 * @param assetAttachRemark
	 * @retrun
	 */
	public List<AssetAttachRemark> getAssetAttachRemarkList(AssetAttachRemark assetAttachRemark)  {
		return assetAttachRemarkMapper.select(assetAttachRemark);
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<AssetAttachRemark> queryAssetAttachRemarkPage(Searcher searcher, Page<AssetAttachRemark> page)  {
		return assetAttachRemarkMapper.queryAssetAttachRemarkPage(searcher, page);
	}

	@Override
	public void addAssetAttachRemark(List<AssetAttachRemark> remarkList) {
		// TODO Auto-generated method stub
		for(AssetAttachRemark remark : remarkList){
			addAssetAttachRemark(remark);
		}
	}

	@Override
	public List<AssetAttachRemark> getAttachRemarkList(String groupId) {
		Condition condtion = new Condition(AssetAttachRemark.class);
		condtion.createCriteria().andGreaterThanOrEqualTo("bizId", groupId)
		.andLessThanOrEqualTo("bizId",groupId + "z");
		return assetAttachRemarkMapper.selectByExample(condtion);
	}


}