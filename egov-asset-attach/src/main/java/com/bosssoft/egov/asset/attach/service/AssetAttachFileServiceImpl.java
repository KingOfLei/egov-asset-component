package com.bosssoft.egov.asset.attach.service;
/**
 * 福建博思软件 1997-2016 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Fri Dec 02 09:07:45 CST 2016
 */

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.attach.entity.AssetAttachBiz;
import com.bosssoft.egov.asset.attach.entity.AssetAttachFile;
import com.bosssoft.egov.asset.attach.entity.AssetAttachItem;
import com.bosssoft.egov.asset.attach.mapper.AssetAttachBizMapper;
import com.bosssoft.egov.asset.attach.mapper.AssetAttachFileMapper;
import com.bosssoft.egov.asset.attach.mapper.AssetAttachItemMapper;
import com.bosssoft.egov.asset.attach.web.AtttachHelper;
import com.bosssoft.egov.asset.common.util.MapUtilsExt;
import com.bosssoft.egov.asset.common.util.NumberUtilsExt;
import com.bosssoft.egov.asset.common.util.StringUtilsExt;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;
import com.bosssoft.platform.persistence.entity.Condition;
import com.bosssoft.platform.persistence.entity.Example.Criteria;
import com.bosssoft.platform.runtime.spi.User;
import com.bosssoft.platform.runtime.spring.RuntimeApplicationContext;


/**
 * 类说明: AssetAttachFileService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2016-12-02   xiedeshou　　　新建
 * </pre>
 */
@Service
public class AssetAttachFileServiceImpl implements AssetAttachFileService {

	private static Logger logger = LoggerFactory.getLogger(AssetAttachFileServiceImpl.class);
	// TODO 添加需要的Mapper
	@Autowired
	private AssetAttachFileMapper assetAttachFileMapper;
	
	@Autowired
	private AssetAttachBizMapper attachBizMapper;
	
	@Autowired
	private AssetAttachItemMapper attachItemMapper;
		
	@Value("${defaultAttachService}")
	private String attachmentServiceName;
	
	private AttachmentService getAttachmentService(String type){
		return RuntimeApplicationContext.getBean(type);
	}
	
	/**
	 *
	 * @param assetAttachFile
	 */
	public void addAssetAttachFile(AssetAttachFile assetAttachFile)  {
		assetAttachFileMapper.insert(assetAttachFile);
	}

	private AssetAttachBiz findAttachBiz(AssetAttachFile assetAttachFile){
		Condition condition = new Condition(AssetAttachBiz.class);		
		condition.createCriteria().andEqualTo("bizType",assetAttachFile.getBizType())
		.andEqualTo("appId", assetAttachFile.getAppId());
		List<AssetAttachBiz> biz = attachBizMapper.selectByExample(condition);
        if(biz != null && biz.size() > 0){
        	return biz.get(0);
        }
        
        return null;
	} 
	
	@Override
	public void saveAttachFile(AssetAttachFile assetAttachFile, InputStream is) {
		//根据业务类型 查询 对应哪张表				
		AssetAttachBiz biz = findAttachBiz(assetAttachFile);
		//默认的附件信息表
		String targetTable = AtttachHelper.ATTACH_TABLE;
		String uploadType = StringUtilsExt.isEmpty(attachmentServiceName, AtttachHelper.UPLOAD_TYPE_LOCALHOST);
		if(biz != null){
			String tbl = biz.getAttachTbl();
			String type = biz.getUploadType();
			if(StringUtilsExt.isNotBlank(tbl)){
				targetTable = tbl;
			}			
			if(StringUtilsExt.isNotBlank(type)){
				uploadType = type;
			}
		}		
		if(assetAttachFile.getFileSize() == 0){
			try {
				assetAttachFile.setFileSize(NumberUtilsExt.toLong(is.available()+""));
			} catch (IOException e) {
			}
		}
		//文件上传 
		String filePath = getAttachmentService(uploadType).upload(StringUtilsExt.toString(assetAttachFile.getAttachId()),is, assetAttachFile.getBizType(), assetAttachFile.getContentType()	);
		//插入
		assetAttachFile.setUploadType(uploadType);
		assetAttachFile.setFilePath(filePath);
		if("ASSET_ATTACH_FILE".equals(targetTable)){
			assetAttachFileMapper.insert(assetAttachFile);
		} else {
		    assetAttachFileMapper.insertAttachFileInfo(assetAttachFile, targetTable);
		}
	}
	/**
	 *
	 * @param assetAttachFile
	 */
	public void delAssetAttachFile(AssetAttachFile assetAttachFile)  {
		assetAttachFileMapper.deleteByPrimaryKey(assetAttachFile);
	}
	public void delAttachFile(Object fileId,User user){
		//先获取文件信息
		AssetAttachFile file = assetAttachFileMapper.selectByPrimaryKey(fileId);		
		if(file == null) return;
		
		//获取业务表信息
//		AssetAttachBiz biz = findAttachBiz(file);
		//默认的附件信息表
		String targetTable = AtttachHelper.ATTACH_TABLE;
//		String uploadType = StringUtilsExt.isEmpty(attachmentServiceName, AtttachHelper.UPLOAD_TYPE_LOCALHOST);
//		if(biz != null){
//			String tbl = biz.getAttachTbl();
//			String type = biz.getUploadType();
//			if(StringUtilsExt.isNotBlank(tbl)){
//				targetTable = tbl;
//			}			
//			if(StringUtilsExt.isNotBlank(type)){
//				uploadType = type;
//			}
//		}
		//更新
		AssetAttachFile updateFile = new AssetAttachFile();
		updateFile.setStatus(0);
		updateFile.setAttachId(file.getAttachId());
		updateFile.setCreateDate(new Date());
		updateFile.setCreatorIp(MapUtilsExt.getString(user.getProperties(), "ip"));
		if(user != null) {
			updateFile.setCreator(StringUtilsExt.join(new String[]{user.getUserCode(),user.getUserName()}," "));
		}
		//删除数据库记录信息 值标记状态1 正常 0 删除
		if("ASSET_ATTACH_FILE".equals(targetTable)){
			
			assetAttachFileMapper.updateByPrimaryKeySelective(updateFile);
//			assetAttachFileMapper.deleteByPrimaryKey(file);
		} else {
			assetAttachFileMapper.updateAttachFileDelStatusInfo(file.getAttachId(), targetTable);
//			assetAttachFileMapper.deleteAttachFileInfo(file.getAttachId(), targetTable);	
		}
//		//删除文件
//		String pathFile = file.getFilePath();
//		//删除
//		getAttachmentService(uploadType).delete(pathFile);				
	}
	public List<AssetAttachFile> queryAttachFileInfosByBizId(String bizId){
		Condition codition = new Condition(AssetAttachFile.class);
		codition.createCriteria().andGreaterThanOrEqualTo("bizId", bizId).andLessThanOrEqualTo("bizId", bizId+"z").andEqualTo("status", "1");
		return assetAttachFileMapper.selectByExample(codition);
	}	

	/**
	 *
	 * @param assetAttachFile
	 */
	public void updateAssetAttachFile(AssetAttachFile assetAttachFile)  {
		assetAttachFileMapper.updateByPrimaryKey(assetAttachFile);
	}

	/**
	 *
	 * @param assetAttachFile
	 * @retrun
	 */
	public List<AssetAttachFile> getAssetAttachFileList(AssetAttachFile assetAttachFile)  {
		return assetAttachFileMapper.select(assetAttachFile);
	}

	public AssetAttachFile queryOneAttachFile(Object fileId){			
		return assetAttachFileMapper.selectByPrimaryKey(fileId);
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<AssetAttachFile> queryAssetAttachFilePage(Searcher searcher, Page<AssetAttachFile> page)  {
		return assetAttachFileMapper.queryAssetAttachFilePage(searcher, page);
	}

	@Override
	public InputStream downloadFile(Object fileId) {
		Condition condition = new Condition(AssetAttachFile.class);
		condition.createCriteria().andEqualTo("attachId", fileId);
		List<AssetAttachFile> file = assetAttachFileMapper.selectByExample(condition);
		if( file != null && file.size() > 0){
			AssetAttachFile attachFile = file.get(0);		   
			//获取业务表信息
		//	AssetAttachBiz biz = findAttachBiz(file.get(0));
			//文件下载方式已当时文件上传方式为主
			String uploadType = AtttachHelper.UPLOAD_TYPE_LOCALHOST;
			if(StringUtilsExt.isNotBlank(attachFile.getUploadType())){
				uploadType = attachFile.getUploadType();
			}
	        String pathFile = attachFile.getFilePath();
	        return getAttachmentService(uploadType).dowload(pathFile);
		}
		logger.debug("未找到对应id[{}]的附件信息。",fileId);
		return null;
	}

	@Override
	public List<AssetAttachItem> getAssetAttachItems(String appId, String[] bizType, String[] itemType,String grade,
			String[] excludeItemCode, String[] includeItemType) {
		Condition condition = new Condition(AssetAttachItem.class);
		Criteria criteria = condition.createCriteria();
		criteria.andEqualTo("appId", appId).andIn("bizType", Arrays.asList(bizType));
		if(itemType != null && itemType.length > 0){
			if(includeItemType != null && includeItemType.length > 0){
				List<String> itemTypeList = new ArrayList<String>();
				itemTypeList.addAll(Arrays.asList(itemType));
				itemTypeList.addAll(Arrays.asList(includeItemType));
				criteria.andIn("itemType",itemTypeList);
			} else {
			   criteria.andIn("itemType", Arrays.asList(itemType));
			}
		}
		if(excludeItemCode != null && excludeItemCode.length > 0){
			criteria.andNotIn("itemCode", Arrays.asList(excludeItemCode));
		}
		if(StringUtilsExt.isNotBlank(grade)){
			criteria.andCondition(" (grade <= '" + grade + "' or grade is null)");
		}
		criteria.andEqualTo("status", 1);
		condition.orderBy("sxh").asc();
		List<AssetAttachItem> list = attachItemMapper.selectByExample(condition);
		if(list != null && !list.isEmpty()) 
			return list;
		else {
			//当找不到时 默认查找itemType 为 - 的数据项
			condition.clear();
			Criteria criteria1 = condition.createCriteria(); 
			criteria1.andEqualTo("appId", appId).andIn("bizType", Arrays.asList(bizType)).andEqualTo("itemType", "-");
			if(StringUtilsExt.isNotBlank(grade)){
				criteria1.andCondition(" (grade <= '" + grade + "' or grade is null)");
			}
			criteria1.andEqualTo("status", 1);
			condition.orderBy("sxh").asc();
			return attachItemMapper.selectByExample(condition);		
		}
	 
	}

	@Override
	public List<AssetAttachItem> checkAttachItems(String appId,
			String[] bizType, String[] itemType) {
		
		return null;
	}

	/**
	 * 
	 * <p>函数名称：  checkAttachmentRequired      </p>
	 * <p>功能说明： 核验附件是否有必填项：有文件或者填写了文字说明
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param appId
	 * @param bizType
	 * @param itemType
	 * @param grade
	 * @param bizId
	 * @return
	 *
	 * @date   创建时间：2017年8月13日
	 * @author 作者：xds
	 */
	@Override
	public List<AssetAttachItem> checkAttachmentRequired(String appId,
			String[] bizType, String[] itemType, String grade, String[] excludeItemCode, String[] includeItemType,String bizId) {
		int cnt = queryAttachmentCount(appId, bizType, itemType, grade, excludeItemCode,includeItemType,bizId);
		List<String> listItemType = new ArrayList<String>();
		if(cnt == 0){ //查询条件不同
			listItemType.add("-");
			if(includeItemType != null && includeItemType.length > 0){
				for(String _itemType : includeItemType){
					listItemType.add(_itemType);
				}
			}
		} else {
			listItemType.addAll(Arrays.asList(itemType));
		} 
		return attachItemMapper.checkAttachmentRequired(appId, Arrays.asList(bizType), listItemType,grade,Arrays.asList(excludeItemCode),bizId);
	}
	
	/**
	 * 
	 * <p>函数名称：  queryAttachmentCount      </p>
	 * <p>功能说明： 返回附件数
	 *
	 * </p>
	 *<p>参数说明：</p>
	 * @param appId
	 * @param bizType
	 * @param itemType
	 * @param grade
	 * @param bizId
	 * @return
	 *
	 * @date   创建时间：2017年8月13日
	 * @author 作者：xds
	 */
	private int queryAttachmentCount(String appId,
			String[] bizType, String[] itemType, String grade, String[] excludeItemCode,String[] includeItemType,String bizId){
		Condition condition = new Condition(AssetAttachItem.class);
		Criteria criteria = condition.createCriteria();
		criteria.andEqualTo("appId", appId).andIn("bizType", Arrays.asList(bizType));
		if(itemType != null && itemType.length > 0){
			if(includeItemType != null && includeItemType.length > 0){
			    List<String> itemTypeList = new ArrayList<String>();
			    itemTypeList.addAll( Arrays.asList(itemType));
			    itemTypeList.addAll( Arrays.asList(includeItemType));
				criteria.andIn("itemType", itemTypeList);
			} else {
			   criteria.andIn("itemType", Arrays.asList(itemType));
			}
		}
		
		if(excludeItemCode != null && excludeItemCode.length > 0){
			criteria.andNotIn("itemCode", Arrays.asList(excludeItemCode));
		}
		
		if(StringUtilsExt.isNotBlank(grade)){
			criteria.andCondition(" (grade <= '" + grade + "' or grade is null)");
		}
		criteria.andEqualTo("status", 1);
		int cnt = attachItemMapper.selectCountByExample(condition);
		
		return cnt;
	}

	@Override
	public boolean checkIncludeAtLeastOneAttachment(String appId,
			String[] bizType, String[] itemType, String grade, String bizId) {
		
		return checkIncludeAtLeastOneAttachment(appId, bizType, itemType, grade, bizId, 1);

	}

	@Override
	public boolean checkIncludeAtLeastOneAttachment(String appId,
			String[] bizType, String[] itemType, String grade, String[] excludeItemCode, String[] includeItemType,String bizId,
			int atleastCnt) {
		int cnt = queryAttachmentCount(appId, bizType, itemType, grade, excludeItemCode,includeItemType,bizId);
		if(cnt == 0){ //查询条件不同 走默认的 "-"
			itemType = new String[]{"-"};
			//根据 默认再搜索一次
			cnt = queryAttachmentCount(appId, bizType, itemType, grade, excludeItemCode,includeItemType,bizId);
			if(cnt == 0){ //无附件项 检验通过
				return true;
			}
		} 
		List<String> itemTypeList = new ArrayList<String>();
		itemTypeList.addAll(Arrays.asList(itemType));
		itemTypeList.addAll(Arrays.asList(includeItemType));
		//先判断 是否有必填项未填写的 ：包含一个附件都没有但填写了 文字说明的
		List<AssetAttachItem> list = attachItemMapper.checkAttachmentRequired(appId, Arrays.asList(bizType), itemTypeList,grade,Arrays.asList(excludeItemCode), bizId);
		if(list == null || !list.isEmpty()){
			return false;//核验不通过
		}
		//再判断 是否至少有一个附件
		
		list = attachItemMapper.queryAttachmentFileCount(appId, Arrays.asList(bizType), itemTypeList, grade, Arrays.asList(excludeItemCode),bizId);
		if(list != null){
			//至少存在 传入的文件个数
			if(list.size() >= atleastCnt){
				return true;
			}
		}
		return false;
	}

	@Override
	public List<AssetAttachItem> getAssetAttachItems(String appId,
			String[] bizType, String[] itemType, String grade) {
		// TODO Auto-generated method stub
		return getAssetAttachItems(appId, bizType, itemType, grade, new String[0], new String[0]);
	}

	@Override
	public List<AssetAttachItem> checkAttachmentRequired(String appId,
			String[] bizType, String[] itemType, String grade, String bizId) {
		
		return checkAttachmentRequired(appId, bizType, itemType, grade, new String[0], new String[0], bizId);
	}

	@Override
	public boolean checkIncludeAtLeastOneAttachment(String appId,
			String[] bizType, String[] itemType, String grade, String bizId,
			int atleastCnt) {
		// TODO Auto-generated method stub
		return checkIncludeAtLeastOneAttachment(appId, bizType, itemType, grade, new String[0], new String[0], bizId, atleastCnt);
	}

	@Override
	public Map<String, String> updateAttachFileByBizId (String bizId){
		Map<String, String> resultsMap = new HashMap<String,String>();
		resultsMap.put("flag", "true");
		resultsMap.put("msg", "附件删除成功！");
		if (StringUtilsExt.isEmpty(bizId)) {
			resultsMap.put("flag", "false");
			resultsMap.put("msg", "执行附件删除操作过程中,业务ID为空，无法删除相应附件！");
		}
		AssetAttachFile assetAttachFile = new AssetAttachFile();
		assetAttachFile.setStatus(0);
		assetAttachFile.setCreateDate(new Date());
		assetAttachFile.setBizId(bizId);
		assetAttachFileMapper.updateAttachFileByBizId(assetAttachFile);
		
		return resultsMap;
	}

}