package com.bosssoft.egov.asset.activiti.service.impl;

/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Tue Jun 20 09:51:13 CST 2017
 */

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.activiti.entity.ActivitiAlarmMonitorData;
import com.bosssoft.egov.asset.activiti.mapper.ActivitiAlarmMonitorDataMapper;
import com.bosssoft.egov.asset.activiti.service.ActivitiAlarmMonitorDataService;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;


/**
 * 类说明: ActivitiAlarmMonitorDataService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-06-20   jinbiao　　　新建
 * </pre>
 */
@Service
public class ActivitiAlarmMonitorDataServiceImpl implements ActivitiAlarmMonitorDataService {

	private static Logger logger = LoggerFactory.getLogger(ActivitiAlarmMonitorDataServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private ActivitiAlarmMonitorDataMapper activitiAlarmMonitorDataMapper;
	
	/**
	 *
	 * @param activitiAlarmMonitorData
	 */
	public void addActivitiAlarmMonitorData(ActivitiAlarmMonitorData activitiAlarmMonitorData)  {
		activitiAlarmMonitorDataMapper.insert(activitiAlarmMonitorData);
	}

	/**
	 *
	 * @param activitiAlarmMonitorData
	 */
	public void delActivitiAlarmMonitorData(ActivitiAlarmMonitorData activitiAlarmMonitorData)  {
		activitiAlarmMonitorDataMapper.deleteByPrimaryKey(activitiAlarmMonitorData);
	}
	
	public void delActivitiAlarmMonitorDataByComplete(int c)  {
		activitiAlarmMonitorDataMapper.delActivitiAlarmMonitorDataByComplete(c);
	}
	public void delActivitiAlarmMonitorDataAll()  {
		activitiAlarmMonitorDataMapper.delActivitiAlarmMonitorDataAll();
	}

	/**
	 *
	 * @param activitiAlarmMonitorData
	 */
	public void updateActivitiAlarmMonitorData(ActivitiAlarmMonitorData activitiAlarmMonitorData)  {
		activitiAlarmMonitorDataMapper.updateByPrimaryKey(activitiAlarmMonitorData);
	}

	/**
	 *
	 * @param activitiAlarmMonitorData
	 * @retrun
	 */
	public List<ActivitiAlarmMonitorData> getActivitiAlarmMonitorDataList(ActivitiAlarmMonitorData activitiAlarmMonitorData)  {
		return null;
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<ActivitiAlarmMonitorData> queryActivitiAlarmMonitorDataPage(Searcher searcher, Page<ActivitiAlarmMonitorData> page)  {
		return null;
	}

	public List<ActivitiAlarmMonitorData> queryBySql(String querysql) {
		return activitiAlarmMonitorDataMapper.queryBySql(querysql);
	}

	public void updateCompleteTimeByBusId(int isComplete, String endTime, String busId, String pid) {
		activitiAlarmMonitorDataMapper.updateCompleteTimeByBusId(isComplete, endTime, busId, pid);
	}
	public void updateCompleteTimeByBusIdNoPid(int isComplete, String endTime, String busId) {
		activitiAlarmMonitorDataMapper.updateCompleteTimeByBusIdNoPid(isComplete, endTime, busId);
	}

	public void insertBySql(String insertsql) {
		activitiAlarmMonitorDataMapper.insertBySql(insertsql);
	}

	public void addAlarmPro() {
		activitiAlarmMonitorDataMapper.addAlarmPro();
	}

	public void updateRoleCodeBusId(String roleCode, String busId, String pid) {
		activitiAlarmMonitorDataMapper.updateRoleCodeBusId(roleCode, busId, pid,0);
	}

	public void updateRoleCodeBusIdNoPid(String roleCode, String busId) {
		activitiAlarmMonitorDataMapper.updateRoleCodeBusIdNoPid(roleCode, busId, 0);
	}


}