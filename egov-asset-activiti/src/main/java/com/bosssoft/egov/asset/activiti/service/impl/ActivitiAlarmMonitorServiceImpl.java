package com.bosssoft.egov.asset.activiti.service.impl;

/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Fri Jun 02 16:32:38 CST 2017
 */

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.activiti.entity.ActivitiAlarmMonitor;
import com.bosssoft.egov.asset.activiti.mapper.ActivitiAlarmMonitorMapper;
import com.bosssoft.egov.asset.activiti.service.ActivitiAlarmMonitorService;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;


/**
 * 类说明: ActivitiAlarmMonitorService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-06-02   jinbiao　　　新建
 * </pre>
 */
@Service
public class ActivitiAlarmMonitorServiceImpl implements ActivitiAlarmMonitorService {

	private static Logger logger = LoggerFactory.getLogger(ActivitiAlarmMonitorServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private ActivitiAlarmMonitorMapper activitiAlarmMonitorMapper;
	
	/**
	 *
	 * @param activitiAlarmMonitor
	 */
	public void addActivitiAlarmMonitor(ActivitiAlarmMonitor activitiAlarmMonitor)  {
		activitiAlarmMonitorMapper.insert(activitiAlarmMonitor);
	}

	/**
	 *
	 * @param activitiAlarmMonitor
	 */
	public void delActivitiAlarmMonitor(ActivitiAlarmMonitor activitiAlarmMonitor)  {
		activitiAlarmMonitorMapper.deleteByPrimaryKey(activitiAlarmMonitor);
	}
	
	/**
	 *
	 * @param activitiAlarmMonitor
	 */
	public void delActivitiAlarmMonitorByRecord(ActivitiAlarmMonitor activitiAlarmMonitor)  {
		activitiAlarmMonitorMapper.delete(activitiAlarmMonitor);
	}

	/**
	 *
	 * @param activitiAlarmMonitor
	 */
	public void updateActivitiAlarmMonitor(ActivitiAlarmMonitor activitiAlarmMonitor)  {
//		activitiAlarmMonitorMapper.updateByPrimaryKey(activitiAlarmMonitor);
		activitiAlarmMonitorMapper.updateByPrimaryKeySelective(activitiAlarmMonitor);
	}

	/**
	 *
	 * @param activitiAlarmMonitor
	 * @retrun
	 */
	public List<ActivitiAlarmMonitor> getActivitiAlarmMonitorList(ActivitiAlarmMonitor activitiAlarmMonitor)  {
		return activitiAlarmMonitorMapper.select(activitiAlarmMonitor);
	}
	
	/**
	 *
	 * @param activitiAlarmMonitor
	 * @retrun
	 */
	public boolean hasRecord(String busId, String taskdef,String pid) {
		List<ActivitiAlarmMonitor> list = activitiAlarmMonitorMapper.hasRecord(busId, taskdef, pid);
		if (list != null && list.size() > 0) {
			return true;
		}
		return false;
	}
	public boolean hasRecordNoPid(String busId, String taskdef) {
		List<ActivitiAlarmMonitor> list = activitiAlarmMonitorMapper.hasRecordNoPid(busId, taskdef);
		if (list != null && list.size() > 0) {
			return true;
		}
		return false;
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<ActivitiAlarmMonitor> queryActivitiAlarmMonitorPage(Searcher searcher, Page<ActivitiAlarmMonitor> page)  {
		return null;
	}

	public void updateTimeByBusIdAndTaskdef(String time, String busId,String taskdef,Long complete,String pid) {
		activitiAlarmMonitorMapper.updateTimeCompleteByBusIdAndTaskdef(time, busId, taskdef, complete, pid);
	}

	public void updateCompleteByBusId(Long complete, String busId, String pid) {
		activitiAlarmMonitorMapper.updateCompleteByBusId(complete, busId, pid);
	}
	public void updateCompleteByBusIdNoPid(Long complete, String busId) {
		activitiAlarmMonitorMapper.updateCompleteByBusIdNoPid(complete, busId);
	}

	public void deleteByBusId(String busId, String pid) {
		activitiAlarmMonitorMapper.deleteByBusId(busId, pid);
	}
	
	public void deleteByBusIdNoPid(String busId) {
		activitiAlarmMonitorMapper.deleteByBusIdNoPid(busId);
	}

	public void updateReturn(String busId, Long complete, String time) {
		activitiAlarmMonitorMapper.updateReutrn(busId, complete, time);
	}

	public void deleteByBusIdAndTaskdef(String busId, String taskdef) {
		activitiAlarmMonitorMapper.deleteByBusIdAndTaskdef(busId, taskdef);
	}

	public void updateTaskDefByBusId(String busId, Long complete, String taskdef, String pid) {
		activitiAlarmMonitorMapper.updateTaskDefByBusId(busId, complete, taskdef, pid);
	}
	public void updateTaskDefByBusIdNoPid(String busId, Long complete, String taskdef) {
		activitiAlarmMonitorMapper.updateTaskDefByBusIdNoPid(busId, complete, taskdef);
	}

	public void updateCurrentTaskDefRoleCode(String busId, Long complete, String currenttaskdef, String authrolecode) {
		activitiAlarmMonitorMapper.updateCurrentTaskDefRoleCode(busId, complete, currenttaskdef, authrolecode);
	}
	
	public void updateCurrentTaskDefRoleCodeTaskName(String busId,String taskName, Long complete, String currenttaskdef, String authrolecode, String pid) {
		activitiAlarmMonitorMapper.updateCurrentTaskDefRoleCodeTaskName(busId, taskName, complete, currenttaskdef, authrolecode,pid);
	}
	
	public void updateCurrentTaskDefRoleCodeTaskNameNoPid(String busId,String taskName, Long complete, String currenttaskdef, String authrolecode) {
		activitiAlarmMonitorMapper.updateCurrentTaskDefRoleCodeTaskNameNoPid(busId, taskName, complete, currenttaskdef, authrolecode);
	}

	public void updateCurrentTaskDefRoleCodeReceiveTime(String busId, Long complete, String currenttaskdef, String authrolecode, String receivetime, String nodename, String nodedesc,String pid) {
		activitiAlarmMonitorMapper.updateCurrentTaskDefRoleCodeReceiveTime(busId, complete, currenttaskdef, authrolecode, receivetime, nodename, nodedesc,pid);
	}
	
	public void updateCurrentTaskDefRoleCodeReceiveTimeNoPid(String busId, Long complete, String currenttaskdef, String authrolecode, String receivetime, String nodename, String nodedesc) {
		activitiAlarmMonitorMapper.updateCurrentTaskDefRoleCodeReceiveTimeNoPid(busId, complete, currenttaskdef, authrolecode, receivetime, nodename, nodedesc);
	}
	public void updateCurrentTaskDefRoleCodeReceiveTimeBack2Zone(String busId, Long complete, String currenttaskdef, String authrolecode, String receivetime, String nodename, String nodedesc,String pid) {
		activitiAlarmMonitorMapper.updateCurrentTaskDefRoleCodeReceiveTimeBack2Zone(busId, complete, currenttaskdef, authrolecode, receivetime, nodename, nodedesc,pid);
	}
	
	public void updateCurrentTaskDefRoleCodeReceiveTimeNoPidBack2Zone(String busId, Long complete, String currenttaskdef, String authrolecode, String receivetime, String nodename, String nodedesc) {
		activitiAlarmMonitorMapper.updateCurrentTaskDefRoleCodeReceiveTimeNoPidBack2Zone(busId, complete, currenttaskdef, authrolecode, receivetime, nodename, nodedesc);
	}
	public void updateCurrentTaskDefRoleCodeReceiveTimeMiddle(String busId, Long complete, String currenttaskdef, String authrolecode, String receivetime, String nodename, String nodedesc,String pid) {
		activitiAlarmMonitorMapper.updateCurrentTaskDefRoleCodeReceiveTimeMiddle(busId, complete, currenttaskdef, authrolecode, receivetime, nodename, nodedesc,pid);
	}
	
	public void updateCurrentTaskDefRoleCodeReceiveTimeMiddleNoPid(String busId, Long complete, String currenttaskdef, String authrolecode, String receivetime, String nodename, String nodedesc) {
		activitiAlarmMonitorMapper.updateCurrentTaskDefRoleCodeReceiveTimeMiddleNoPid(busId, complete, currenttaskdef, authrolecode, receivetime, nodename, nodedesc);
	}

	public void updateCompleteEndTimeByBusId(Long complete, String busId, String pid, String endtime, String nodename, String nodedesc) {
		activitiAlarmMonitorMapper.updateCompleteEndTimeByBusId(complete, busId, pid, endtime, nodename, nodedesc);
	}
	
	public void updateCompleteEndTimeByBusIdNoPid(Long complete, String busId, String endtime, String nodename, String nodedesc) {
		activitiAlarmMonitorMapper.updateCompleteEndTimeByBusIdNoPid(complete, busId, endtime, nodename, nodedesc);
	}

	public void updateCompleteEndTimeByBusIdByIsComplete(Long complete, String busId, String pid, Long completebefore, String endtime) {
		activitiAlarmMonitorMapper.updateCompleteEndTimeByBusIdByIsComplete(complete, busId, pid, completebefore, endtime);
	}
	/**
	 * 未完成的更新完成
	 * 
	 */
	public void updateCompleteEndTimeByBusIdByIsCompleteNoPid(Long complete, String busId, Long completebefore, String endtime) {
		activitiAlarmMonitorMapper.updateCompleteEndTimeByBusIdByIsCompleteNoPid(complete, busId, completebefore, endtime);
	}

	public void updateReceiveTimeByBusIdAndTaskdef(String time, String busId, String taskdef, Long complete, String pid) {
		activitiAlarmMonitorMapper.updateReceiveTimeCompleteByBusIdAndTaskdef(time, busId, taskdef, complete, pid);
	}
	public void updateReceiveTimeByBusIdAndTaskdefNoPid(String time, String busId, String taskdef, Long complete) {
		activitiAlarmMonitorMapper.updateReceiveTimeCompleteByBusIdAndTaskdefNoPid(time, busId, taskdef, complete);
	}

	public void updateReceiveTimeCreateTimeCompleteByBusIdAndTaskdef(String receiveTime, String createTime, String busId, String taskdef, Long complete, String pid) {
		activitiAlarmMonitorMapper.updateReceiveTimeCreateTimeCompleteByBusIdAndTaskdef(receiveTime, createTime, busId, taskdef, complete, pid,"");
	}
	public void updateReceiveTimeCreateTimeCompleteByBusIdAndTaskdefNoPid(String receiveTime, String createTime, String busId, String taskdef, Long complete) {
		activitiAlarmMonitorMapper.updateReceiveTimeCreateTimeCompleteByBusIdAndTaskdefNoPid(receiveTime, createTime, busId, taskdef, complete,"");
	}
	
	public List<ActivitiAlarmMonitor> getMonitorsNoPidIn(String busId,String zone){
		return activitiAlarmMonitorMapper.getMonitorsNoPid(busId,zone);
	}
	
	public List<ActivitiAlarmMonitor> getMonitorsIn(String busId,String zone,String pid){
		return activitiAlarmMonitorMapper.getMonitors(busId,zone,pid);
	}

	public ActivitiAlarmMonitor getMonitorNoPid(String busId,String zone) {
		List<ActivitiAlarmMonitor> list = this.getMonitorsNoPidIn(busId,zone);
		if(list != null && list.size() > 0){
			return list.get(0);
		}
		return null;
	}

	public ActivitiAlarmMonitor getMonitor(String busId,String zone, String pid) {
		List<ActivitiAlarmMonitor> list = this.getMonitorsIn(busId,zone, pid);
		if(list != null && list.size() > 0){
			return list.get(0);
		}
		return null;
	}
	public ActivitiAlarmMonitor getMonitorEndNoPid(String busId,String endTaskDef) {
		ActivitiAlarmMonitor record = new ActivitiAlarmMonitor();
		record.setBusId(busId);
		record.setTaskdefkeyend(endTaskDef);
		record.setIsComplete(0l);
		List<ActivitiAlarmMonitor> list = activitiAlarmMonitorMapper.select(record);
		if(list != null && list.size() > 0){
			return list.get(0);
		}
		return null;
	}
	
	public ActivitiAlarmMonitor getMonitorStartNoPid(String busId,String startTaskDef) {
		ActivitiAlarmMonitor record = new ActivitiAlarmMonitor();
		record.setBusId(busId);
		record.setTaskdefkeybegin(startTaskDef);
		record.setIsComplete(0l);
		List<ActivitiAlarmMonitor> list = activitiAlarmMonitorMapper.select(record);
		if(list != null && list.size() > 0){
			return list.get(0);
		}
		return null;
	}
	public ActivitiAlarmMonitor getMonitorStart(String busId, String pid,String startTaskDef) {
		ActivitiAlarmMonitor record = new ActivitiAlarmMonitor();
		record.setBusId(busId);
		record.setTaskdefkeybegin(startTaskDef);
		record.setIsComplete(0l);
		record.setPid(pid);
		List<ActivitiAlarmMonitor> list = activitiAlarmMonitorMapper.select(record);
		if(list != null && list.size() > 0){
			return list.get(0);
		}
		return null;
	}
	
	public ActivitiAlarmMonitor getMonitorEnd(String busId, String pid,String endTaskDef) {
		ActivitiAlarmMonitor record = new ActivitiAlarmMonitor();
		record.setBusId(busId);
		record.setTaskdefkeyend(endTaskDef);
		record.setPid(pid);
		record.setIsComplete(0l);
		List<ActivitiAlarmMonitor> list = activitiAlarmMonitorMapper.select(record);
		if(list != null && list.size() > 0){
			return list.get(0);
		}
		return null;
	}

	public void delMonitorsNoComplete(String busId, String pid) {
		ActivitiAlarmMonitor del = new ActivitiAlarmMonitor();
		del.setBusId(busId);
		del.setPid(pid);
		del.setIsComplete(0l);
		activitiAlarmMonitorMapper.delete(del);
	}

	public void delMonitorsNoCompleteNoPid(String busId) {
		ActivitiAlarmMonitor del = new ActivitiAlarmMonitor();
		del.setBusId(busId);
		del.setIsComplete(0l);
		activitiAlarmMonitorMapper.delete(del);
	}

	public void delMonitorsEnd(String busId, String pid, String endTaskdef) {
		ActivitiAlarmMonitor del = new ActivitiAlarmMonitor();
		del.setBusId(busId);
		del.setPid(pid);
		del.setTaskdefkeyend(endTaskdef);
		del.setIsComplete(0l);
		activitiAlarmMonitorMapper.delete(del);
	}

	public void delMonitorsEndNoPid(String busId, String endTaskdef) {
		ActivitiAlarmMonitor del = new ActivitiAlarmMonitor();
		del.setBusId(busId);
		del.setTaskdefkeyend(endTaskdef);
		del.setIsComplete(0l);
		activitiAlarmMonitorMapper.delete(del);
	}
	
	public void updateTimeByBusIdComplete(String time, String busId, Long complete ){
		activitiAlarmMonitorMapper.updateTimeByBusIdComplete(time, busId, complete);
	}

	public void beginAlarmProcedure() {
		activitiAlarmMonitorMapper.beginAlarmProcedure();
	}

	public void dynamicAlarmPro(Map<String, Object> alarmMap) {
		activitiAlarmMonitorMapper.dynamicAlarmPro(alarmMap);
	}

	public boolean hasRecordNoComplete(String busId, String taskdef, String pid, Long complete) {
		List<ActivitiAlarmMonitor> list = activitiAlarmMonitorMapper.hasRecordNoComplete(busId, taskdef, pid, complete);
		if (list != null && list.size() > 0) {
			return true;
		}
		return false;
	}

	public boolean hasRecordNoCompleteNoPid(String busId, String taskdef, Long complete) {
		List<ActivitiAlarmMonitor> list = activitiAlarmMonitorMapper.hasRecordNoCompleteNoPid(busId, taskdef, complete);
		if (list != null && list.size() > 0) {
			return true;
		}
		return false;
	}

	public void updateCompleteByBusIdExceptNowZone(Long complete, String busId, String pid, String taskdef) {
		activitiAlarmMonitorMapper.updateCompleteByBusIdExceptNowZone(complete,busId,pid,taskdef);
	}

	public void updateCompleteByBusIdExceptNowZoneNoPid(Long complete, String busId, String taskdef) {
		activitiAlarmMonitorMapper.updateCompleteByBusIdExceptNowZoneNoPid(complete,busId,taskdef);
	}

}