package com.bosssoft.egov.asset.activiti.service.impl;

/**
 * 福建博思软件 1997-2018 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Sun Mar 25 13:16:04 CST 2018
 */

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.activiti.ActivitiIdGen;
import com.bosssoft.egov.asset.activiti.entity.ActivitiPermissionExt;
import com.bosssoft.egov.asset.activiti.mapper.ActivitiPermissionExtMapper;
import com.bosssoft.egov.asset.activiti.service.ActivitiPermissionExtService;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.lang.data.Searcher;
import com.bosssoft.platform.page.utils.StringUtil;


/**
 * 类说明: ActivitiPermissionExtService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2018-03-25   jinbiao　　　新建
 * </pre>
 */
@Service
public class ActivitiPermissionExtServiceImpl implements ActivitiPermissionExtService {

	private static Logger logger = LoggerFactory.getLogger(ActivitiPermissionExtServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private ActivitiPermissionExtMapper activitiPermissionExtMapper;
	
	/**
	 *
	 * @param activitiPermissionExt
	 */
	public void addActivitiPermissionExt(ActivitiPermissionExt activitiPermissionExt)  {
		boolean designByOrg = false;
		if(StringUtil.isNotEmpty(activitiPermissionExt.getManageOrgs())){
			if(StringUtil.isEmpty(activitiPermissionExt.getEnable())){
				activitiPermissionExt.setEnable("1");
			}
			//判断当前是设置单位还是设置业务
			if(StringUtil.isNotEmpty(activitiPermissionExt.getDesignByOrg()) && "1".equals(activitiPermissionExt.getDesignByOrg())){
				designByOrg = true;
			}
			String[] orgCodes =  activitiPermissionExt.getManageOrgs().split(",");
			for (String orgCode : orgCodes) {
				if (orgCode.endsWith("001")) {// 本级单位
					String zgOrg = orgCode.substring(0, orgCode.indexOf("001"));
					String orignCodes = activitiPermissionExt.getManageOrgs();
					orignCodes = orignCodes + ',' + zgOrg;
					activitiPermissionExt.setManageOrgs(orignCodes);
				}
			}
		}
		String[] activitiKeys = activitiPermissionExt.getActivityKey().split(",");
		if(activitiKeys.length > 0){
			for (String activitiKey : activitiKeys) {
				ActivitiPermissionExt del = new ActivitiPermissionExt();
				del.setActivityKey(activitiKey);
				del.setAssignedUsers(activitiPermissionExt.getAssignedUsers());
				del.setProcessDefinition(activitiPermissionExt.getProcessDefinition());
				if(designByOrg){
					this.delActivitiPermissionExtOrg(activitiKey, activitiPermissionExt.getProcessDefinition(), activitiPermissionExt.getAssignedUsers());
				}else{
					this.delActivitiPermissionExtBus(activitiKey, activitiPermissionExt.getProcessDefinition(), activitiPermissionExt.getAssignedUsers());
				}
				activitiPermissionExt.setId(ActivitiIdGen.newWKID());
				activitiPermissionExt.setActivityKey(activitiKey);
				activitiPermissionExtMapper.insert(activitiPermissionExt);
			}
		}
	}

	/**
	 *
	 * @param activitiPermissionExt
	 */
	public void delActivitiPermissionExt(ActivitiPermissionExt activitiPermissionExt)  {
		activitiPermissionExtMapper.deleteByPrimaryKey(activitiPermissionExt);
	}
	
	/**
	 *
	 * @param activitiPermissionExt
	 */
	public void batchDelete(List<ActivitiPermissionExt> activitiPermissionExts)  {
		if(activitiPermissionExts != null && activitiPermissionExts.size() > 0){
			for (ActivitiPermissionExt activitiPermissionExt : activitiPermissionExts) {
				activitiPermissionExtMapper.delActivitiPermissionExtById(activitiPermissionExt.getId());
			}
		}
	}

	/**
	 *
	 * @param activitiPermissionExt
	 */
	public void updateActivitiPermissionExt(ActivitiPermissionExt activitiPermissionExt)  {
		activitiPermissionExtMapper.updateByPrimaryKey(activitiPermissionExt);
	}

	/**
	 *
	 * @param activitiPermissionExt
	 * @retrun
	 */
	public List<ActivitiPermissionExt> getActivitiPermissionExtList(ActivitiPermissionExt activitiPermissionExt)  {
		return activitiPermissionExtMapper.select(activitiPermissionExt);
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<ActivitiPermissionExt> queryActivitiPermissionExtPage(Searcher searcher, Page<ActivitiPermissionExt> page)  {
		return activitiPermissionExtMapper.queryActivitiPermissionExtPage(searcher, page);
	}

	public int delActivitiPermissionExtOrg(String activitiKey, String busType, String assignUsers) {
		return activitiPermissionExtMapper.delActivitiPermissionExtOrg(activitiKey, busType, assignUsers);
	}
	
	public int delActivitiPermissionExtBus(String activitiKey, String busType, String assignUsers) {
		return activitiPermissionExtMapper.delActivitiPermissionExtBus(activitiKey, busType, assignUsers);
	}


}