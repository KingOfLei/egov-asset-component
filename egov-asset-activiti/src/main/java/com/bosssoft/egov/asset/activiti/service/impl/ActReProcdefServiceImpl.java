package com.bosssoft.egov.asset.activiti.service.impl;

/**
 * 福建博思软件 1997-2016 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Thu Dec 08 14:14:58 CST 2016
 */

import java.util.ArrayList;
import java.util.List;

import org.activiti.engine.RepositoryService;
import org.activiti.engine.repository.ProcessDefinition;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.activiti.entity.ActReProcdef;
import com.bosssoft.egov.asset.activiti.mapper.ActReProcdefMapper;
import com.bosssoft.egov.asset.activiti.service.ActReProcdefService;
import com.bosssoft.egov.asset.activiti.service.ActivitiAmcService;
import com.bosssoft.egov.asset.common.util.StringUtilsExt;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.utils.StringUtils;
import com.bosssoft.platform.common.lang.data.Searcher;

/**
 * 类说明: ActReProcdefService接口实现类.
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2016-12-08   jinbiao　　　新建
 * </pre>
 */
@Service
public class ActReProcdefServiceImpl implements ActReProcdefService {

	// TODO 添加需要的Mapper
	@Autowired
	private ActReProcdefMapper actReProcdefMapper;
	@Autowired
	private RepositoryService repositoryService;
	@Autowired
	private ActivitiAmcService activitiProcessService;
	/**
	 *
	 * @param actReProcdef
	 */
	public void addActReProcdef(ActReProcdef actReProcdef) {
		actReProcdefMapper.insert(actReProcdef);
	}

	/**
	 *
	 * @param actReProcdef
	 */
	public void delActReProcdef(ActReProcdef actReProcdef) {
		actReProcdefMapper.deleteByPrimaryKey(actReProcdef);
	}

	public void batchDelete(List<ActReProcdef> actReProcdef) {
		if (actReProcdef.size() > 0) {
			for (int i = 0, len = actReProcdef.size(); i < len; i++) {
				String deploymentId = actReProcdef.get(i).getDeploymentId();
				activitiProcessService.deleteProcessDefinitionByDeploymentId(deploymentId, true);
			}
		}
	}

	/**
	 *
	 * @param actReProcdef
	 */
	public void updateActReProcdef(ActReProcdef actReProcdef) {
		actReProcdefMapper.updateByPrimaryKey(actReProcdef);
	}

	/**
	 *
	 * @param actReProcdef
	 * @retrun
	 */
	public List<ActReProcdef> getActReProcdefList(ActReProcdef actReProcdef) {
		return null;
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<ActReProcdef> queryActReProcdefPage(Searcher searcher, Page<ActReProcdef> page) {
		return actReProcdefMapper.queryActReProcdefPage(searcher, page);
	}

	public ActReProcdef queryActReProcdefById(String id) {
		return actReProcdefMapper.queryActReProcdefById(id);
	}

	public List<ActReProcdef> getPageResult(int firstResult, int maxResults, String key1, String key2) {
		String like = "";
		key1 = StringUtilsExt.upperCase(key1);
		List<ProcessDefinition> li = new ArrayList<ProcessDefinition>();
		if(StringUtils.isNotNullAndBlank(key1) && key2 == null){
			like = "%"+key1+"%";
			li = repositoryService.createProcessDefinitionQuery().latestVersion().processDefinitionKeyLike(like).listPage(firstResult, maxResults);
		}else if(StringUtils.isNotNullAndBlank(key2) && key1 == null){
			li = repositoryService.createProcessDefinitionQuery().latestVersion().processDefinitionCategory(key2).listPage(firstResult, maxResults);
		}else if(StringUtils.isNotNullAndBlank(key2) && StringUtils.isNotNullAndBlank(key2)){
			String like1 = "%"+key1+"%";
			String like2 = key2;
			li = repositoryService.createProcessDefinitionQuery().latestVersion().processDefinitionKeyLike(like1).processDefinitionCategoryLike(like2).listPage(firstResult, maxResults);
		}else{
			li = repositoryService.createProcessDefinitionQuery().latestVersion().listPage(firstResult, maxResults);
		}
		List<ActReProcdef> list = new ArrayList<ActReProcdef>();
		if (li.size() > 0) {
			for (int i = 0, len = li.size(); i < len; i++) {
				list.add(this.queryActReProcdefById(li.get(i).getId()));
			}
		}
		return list;
	}

}