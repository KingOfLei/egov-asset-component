package com.bosssoft.egov.asset.activiti.service.impl;

/**
 * 福建博思软件 1997-2017 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Sat Mar 04 11:52:39 CST 2017
 */

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.activiti.entity.ActivitiNextUser;
import com.bosssoft.egov.asset.activiti.mapper.ActivitiNextUserMapper;
import com.bosssoft.egov.asset.activiti.service.ActivitiNextUserService;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.persistence.entity.Condition;
import com.bosssoft.platform.common.lang.data.Searcher;


/**
 * 类说明: ActivitiNextUserService接口实现类. 
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2017-03-04   jinbiao　　　新建
 * </pre>
 */
@Service
public class ActivitiNextUserServiceImpl implements ActivitiNextUserService {

	// TODO 添加需要的Mapper
	@Autowired
	private ActivitiNextUserMapper activitiNextUserMapper;
	
	/**
	 *
	 * @param activitiNextUser
	 */
	public void addActivitiNextUser(ActivitiNextUser activitiNextUser)  {
		activitiNextUserMapper.insert(activitiNextUser);
	}

	/**
	 *
	 * @param activitiNextUser
	 */
	public void delActivitiNextUser(ActivitiNextUser activitiNextUser)  {
		activitiNextUserMapper.deleteByPrimaryKey(activitiNextUser);
	}

	/**
	 *
	 * @param activitiNextUser
	 */
	public void updateActivitiNextUser(ActivitiNextUser activitiNextUser)  {
		activitiNextUserMapper.updateByPrimaryKey(activitiNextUser);
	}

	/**
	 *
	 * @param activitiNextUser
	 * @retrun
	 */
	public List<ActivitiNextUser> getActivitiNextUserList(ActivitiNextUser activitiNextUser)  {
		return activitiNextUserMapper.select(activitiNextUser);
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<ActivitiNextUser> queryActivitiNextUserPage(Searcher searcher, Page<ActivitiNextUser> page)  {
		return activitiNextUserMapper.queryActivitiNextUserPage(searcher, page);
	}
	
	public void updateActivitiNextUserByBusId(ActivitiNextUser record){
		Condition condition = new Condition(ActivitiNextUser.class);
		condition.createCriteria().andEqualTo("busId", record.getBusId());
//		.andEqualTo("orgCode",fabMonitorRecordDetail.getOrgCode())
//		.andEqualTo("morgCode", fabMonitorRecordDetail.getMorgCode());
//		fabMonitorRecordDetailMapper.updateByExampleSelective(fabMonitorRecordDetail, condition);
		ActivitiNextUser act = new ActivitiNextUser();
		act.setStatus(record.getStatus());
		act.setTaskName(record.getTaskName());
		act.setNextTaskName(record.getNextTaskName());
		activitiNextUserMapper.updateByExampleSelective(act, condition);
	}

	public void updateActivitiNextUserByBusIdEnd(ActivitiNextUser record) {
		Condition condition = new Condition(ActivitiNextUser.class);
		condition.createCriteria().andEqualTo("busId", record.getBusId());
//		.andEqualTo("orgCode",fabMonitorRecordDetail.getOrgCode())
//		.andEqualTo("morgCode", fabMonitorRecordDetail.getMorgCode());
//		fabMonitorRecordDetailMapper.updateByExampleSelective(fabMonitorRecordDetail, condition);
		ActivitiNextUser act = new ActivitiNextUser();
		act.setStatus(record.getStatus());
		act.setTaskName(record.getTaskName());
		act.setNextTaskName(record.getNextTaskName());
		act.setProcInstId(record.getProcInstId());
		activitiNextUserMapper.updateByExampleSelective(act, condition);
		
	}
	
	public void deleteHistoryNextUser(ActivitiNextUser record){
		activitiNextUserMapper.delete(record);
	}
	
	public void updateActivitiNextUserByBusIdUserCodeToDo(ActivitiNextUser record){
		Condition condition = new Condition(ActivitiNextUser.class);
		condition.createCriteria().andEqualTo("busId", record.getBusId())
		.andEqualTo("userCode",record.getUserCode())
		.andEqualTo("userTaskId", record.getUserTaskId())
		;
//		.andEqualTo("morgCode", fabMonitorRecordDetail.getMorgCode());
//		fabMonitorRecordDetailMapper.updateByExampleSelective(fabMonitorRecordDetail, condition);
		ActivitiNextUser act = new ActivitiNextUser();
		act.setStatus(record.getIsTodo());
		activitiNextUserMapper.updateByExampleSelective(act, condition);
	}
	
	public void updateActivitiNextUserAfterDo(ActivitiNextUser record){
		Condition condition = new Condition(ActivitiNextUser.class);
		condition.createCriteria().andEqualTo("busId", record.getBusId())
//		.andEqualTo("userCode",record.getUserCode())
//		.andEqualTo("userTaskId", record.getUserTaskId())
		;
//		.andEqualTo("morgCode", fabMonitorRecordDetail.getMorgCode());
//		fabMonitorRecordDetailMapper.updateByExampleSelective(fabMonitorRecordDetail, condition);
		ActivitiNextUser act = new ActivitiNextUser();
		act.setStatus(1);
		act.setTaskName(record.getTaskName());
		act.setNextTaskName(record.getNextTaskName());
		act.setStatus(record.getStatus());
		activitiNextUserMapper.updateByExampleSelective(act, condition);
	}
	
	public void updateProcessVersionByBusId(String busId, String proId){
		ActivitiNextUser newuser = new ActivitiNextUser();
		newuser.setProcInstId(proId);
		Condition condition = new Condition(ActivitiNextUser.class);
		condition.createCriteria().andEqualTo("busId", busId);
		
		activitiNextUserMapper.updateByExampleSelective(newuser, condition);
	}
	
}