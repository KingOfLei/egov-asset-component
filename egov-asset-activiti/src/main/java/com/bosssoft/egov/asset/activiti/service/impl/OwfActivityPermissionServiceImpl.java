package com.bosssoft.egov.asset.activiti.service.impl;

/**
 * 福建博思软件 1997-2016 版权所有
 * Auto generated by Bosssoft Studio version 1.0 beta
 * Sat Nov 19 13:43:04 CST 2016
 */

import java.util.ArrayList;
import java.util.List;

import org.activiti.engine.RepositoryService;
import org.activiti.engine.repository.ProcessDefinition;
import org.dom4j.DocumentException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bosssoft.egov.asset.activiti.entity.ActivitiParams;
import com.bosssoft.egov.asset.activiti.entity.ActivitiTaskMoveComboboxShow;
import com.bosssoft.egov.asset.activiti.entity.AssetActivitiBus;
import com.bosssoft.egov.asset.activiti.entity.OwfActivityPermission;
import com.bosssoft.egov.asset.activiti.mapper.OwfActivityPermissionMapper;
import com.bosssoft.egov.asset.activiti.service.ActivitiAmcService;
import com.bosssoft.egov.asset.activiti.service.ActivitiProcessService;
import com.bosssoft.egov.asset.activiti.service.AssetActivitiBusService;
import com.bosssoft.egov.asset.activiti.service.OwfActivityPermissionService;
import com.bosssoft.egov.asset.common.util.StringUtilsExt;
import com.bosssoft.egov.asset.drc.DrcHepler;
import com.bosssoft.platform.appframe.api.entity.ApiUser;
import com.bosssoft.platform.common.lang.data.Page;
import com.bosssoft.platform.common.utils.StringUtils;
import com.bosssoft.platform.common.lang.data.Searcher;
import com.bosssoft.platform.runtime.exception.BusinessException;

/**
 * 类说明: OwfActivityPermissionService接口实现类.
 *
 * 类用途：
 *
 * <pre>
 * 修改记录：
 * 修改日期　　　修改人　　　修改原因
 * 2016-11-19   jinbiao　　　新建
 * </pre>
 */
@Service
public class OwfActivityPermissionServiceImpl implements OwfActivityPermissionService {

//	private static Logger logger = LoggerFactory.getLogger(OwfActivityPermissionServiceImpl.class);

	// TODO 添加需要的Mapper
	@Autowired
	private OwfActivityPermissionMapper owfActivityPermissionMapper;
	@Autowired
	private AssetActivitiBusService activitiBusService;
	@Autowired
	private RepositoryService repositoryService;
	@Autowired
	private ActivitiProcessService activitiProcessService;
	@Autowired
	private ActivitiAmcService activitiAmcService;

	/**
	 *
	 * @param owfActivityPermission
	 */
	public void addOwfActivityPermission(OwfActivityPermission owfActivityPermission) {
		owfActivityPermissionMapper.insert(owfActivityPermission);
	}

	/**
	 *
	 * @param owfActivityPermission
	 */
	public void delOwfActivityPermission(OwfActivityPermission owfActivityPermission) {
		owfActivityPermissionMapper.deleteByPrimaryKey(owfActivityPermission);
	}

	public void batchDelOwfActivityPermission(List<OwfActivityPermission> owfActivityPermissions) {
		if (owfActivityPermissions != null && owfActivityPermissions.size() > 0) {
			for (OwfActivityPermission owfActivityPermission2 : owfActivityPermissions) {
				owfActivityPermissionMapper.deleteByPrimaryKey(owfActivityPermission2);
			}
		}
	}

	/**
	 *
	 * @param owfActivityPermission
	 */
	public void updateOwfActivityPermission(OwfActivityPermission owfActivityPermission) {
		owfActivityPermissionMapper.updateByPrimaryKey(owfActivityPermission);
	}

	/**
	 *
	 * @param owfActivityPermission
	 * @retrun
	 */
	public List<OwfActivityPermission> getOwfActivityPermissionList(OwfActivityPermission owfActivityPermission) {
		return null;
	}

	/**
	 *
	 * @param searcher
	 * @param page
	 * @retrun
	 */
	public Page<OwfActivityPermission> queryOwfActivityPermissionPageOne(Searcher searcher, Page<OwfActivityPermission> page) throws BusinessException {
		return owfActivityPermissionMapper.queryOwfActivityPermissionPage(searcher, page);
	}

	public List<OwfActivityPermission> getShowName(List<OwfActivityPermission> list) {
//		String appId = AppContext.getAppContext().getAppConfiguration().getAppId();
//		String appName = AppContext.getAppContext().getAppConfiguration().getAppName();
		for (int i = 0, len = list.size(); i < len; i++) {
			String assignee = list.get(i).getAssignedUser();
			String grandtUser = list.get(i).getGrantedUsers();
			String grandtGroup = list.get(i).getGrantedGroups();
			if (StringUtils.isNotNullAndBlank(assignee)) {
				ApiUser apiUser = DrcHepler.getInstance().findUseriInfoByUserCode(assignee);
				if (apiUser != null) {
					list.get(i).setAssigneeName(apiUser.getUserName());
				} else {
					list.get(i).setAssigneeName("-");
				}
			}
			if (StringUtils.isNotNullAndBlank(grandtUser)) {
				String[] grantUsers = grandtUser.split("\\;");
				StringBuffer grantUsersName = new StringBuffer();
				for (int j = 0, lenj = grantUsers.length; j < lenj; j++) {
					ApiUser apiUser = DrcHepler.getInstance().findUseriInfoByUserCode(grantUsers[j]);
					if (apiUser != null) {
						grantUsersName.append(apiUser.getUserName());
						if (j != 0 && j < lenj - 1) {
							grantUsersName.append(";");
						}
					}
				}
				String finalUserName = grantUsersName.toString();
				if (StringUtils.isNullOrBlank(finalUserName)) {
					finalUserName = "-";
				}
				list.get(i).setGrantUserName(finalUserName);
			}
		}

		list.get(0).setGrantUserName("空空如也！");

		return list;
	}

	public List<OwfActivityPermission> queryOwfActivityPermissionPage(Searcher searcher, Page<OwfActivityPermission> page) {
		String usertaskName = "";
		if(searcher.getConditions() != null && searcher.getConditions().size() == 1){
			String  con = searcher.getConditions().get(0).toString();
			if(con.contains("ACTIVITY_KEY")){
				usertaskName = con.substring(con.indexOf("like") + 4, con.length());
				searcher.getConditions().remove(0);
			}else{
			}
		}
		
		if(searcher.getConditions() != null && searcher.getConditions().size() > 1){
			String  con = searcher.getConditions().get(0).toString();
			usertaskName = con.substring(con.indexOf("like") + 4, con.length());
			searcher.getConditions().remove(0);
		}
		
		
		List<OwfActivityPermission> list = this.queryOwfActivityPermissionPageOne(searcher, page);
		if (list != null && list.size() > 0) {
			for (int i = 0, len = list.size(); i < len; i++) {
				String deploymentKey = list.get(i).getProcessDefinitionId().split("\\:")[0];

				AssetActivitiBus aab = activitiBusService.queryAssetActivitiBusByKey(deploymentKey);
				String busTypeName = "";
				if (aab == null) {
					busTypeName = "业务类型已被删除！";
				} else {
					busTypeName = aab.getBusTypeName();
				}
				String pdVersion = "";
				String version = list.get(i).getProcessDefinitionId().split("\\:")[1];

				ProcessDefinition pd = repositoryService.createProcessDefinitionQuery().latestVersion().processDefinitionKey(deploymentKey).singleResult();
				if (pd == null && aab != null) {
					busTypeName += ("（流程不存在！）");
				} else if (pd != null && aab != null) {
					ActivitiParams params = new ActivitiParams();
					params.setDeploymentId(pd.getDeploymentId());
					try {
						List<ActivitiTaskMoveComboboxShow> taskNode = activitiAmcService.queryUserTaskIdListByDeploymentId(params);
						if (taskNode != null && taskNode.size() > 0) {
							String userTaskId = list.get(i).getActivityKey();
							for (ActivitiTaskMoveComboboxShow activitiTaskMoveComboboxShow : taskNode) {
								if (activitiTaskMoveComboboxShow.getUserTaskId().equals(userTaskId)) {
									String userTaskName = activitiTaskMoveComboboxShow.getUserTaskName();
									list.get(i).setUserTaskName(userTaskName);
								}
							}
						}
					} catch (DocumentException e) {
						throw new BusinessException("", "");
					}

					if (list != null && list.size() > 0) {
						this.getShowName(list);
					}

					pdVersion = pd.getVersion() + "";
					if (pdVersion.equals(version)) {
						busTypeName += ("（最新流程，有效授权！）");
					} else {
						busTypeName += ("（旧版本，无效授权！）");
					}
				}
				// 设置名称
				list.get(i).setProcessName(busTypeName);
			}
		}
		//由于节点名称不在表中记录，做了一次转换。故无法通过search查找。
		//先找出某个流程下面相应的节点，然后再取出，做最后一层过滤
		List<OwfActivityPermission> result = new ArrayList<OwfActivityPermission>();
		if (StringUtilsExt.isNotBlank(usertaskName)) {
			for (OwfActivityPermission owfActivityPermission : list) {
				if (StringUtilsExt.isNotBlank(owfActivityPermission.getUserTaskName())) {
					if (owfActivityPermission.getUserTaskName().contains(usertaskName)) {
						result.add(owfActivityPermission);
					}
				}
			}
		}else{
			for (OwfActivityPermission owfActivityPermission : list) {
				if (StringUtilsExt.isNotBlank(owfActivityPermission.getUserTaskName())) {
					result.add(owfActivityPermission);
				}
			}
		}
		return result;
	}

	public List<OwfActivityPermission> queryOwfActivityPermissionByProcessDefId(String pdefId, String userTaskId) {
		String pdeflike = "%"+pdefId.split("\\:")[0]+"%";
		return owfActivityPermissionMapper.queryOwfActivityPermissionByProcessDefId(pdeflike, userTaskId);
	}

	public List<OwfActivityPermission> queryOwfActivityPermissionByProcessDefId(String defId) {
		return owfActivityPermissionMapper.queryOwfActivityPermissionByProcessByDefId(defId);
	}

	public List<ActivitiTaskMoveComboboxShow> getUserTaskList(OwfActivityPermission owfActivityPermission) {
		List<ActivitiTaskMoveComboboxShow> list = new ArrayList<ActivitiTaskMoveComboboxShow>();

		String deploymentKey = owfActivityPermission.getProcessDefinitionId().split("\\:")[0];

		ProcessDefinition pd = repositoryService.createProcessDefinitionQuery().latestVersion().processDefinitionKey(deploymentKey).singleResult();
		if (pd != null) {
			ActivitiParams params = new ActivitiParams();
			params.setDeploymentId(pd.getDeploymentId());
			try {
				List<ActivitiTaskMoveComboboxShow> taskNode = activitiAmcService.queryUserTaskIdListByDeploymentId(params);
				taskNode.remove(0);
				return taskNode;
			} catch (DocumentException e) {
				throw new BusinessException("", "");
			}
		}
		return list;

	}
	
	public List<OwfActivityPermission>updateVersionQuery(String likeKey) {
		String like = "%" + likeKey + "%";
		return owfActivityPermissionMapper.updateVersionQuery(like);
	}
	public void updateVersion(String nowKey, String likeKey) {
		List<OwfActivityPermission> list = this.updateVersionQuery(likeKey);
		if (list != null && list.size() > 0) {
			for (OwfActivityPermission owfActivityPermission : list) {
				//防止    CARD_AUDIT_CHANGE更新的时候，把CARD_AUDIT_CHANGE_SIMPLE更新掉，报错
				String sqlRealProcessKey = owfActivityPermission.getProcessDefinitionId().split("\\:")[0];
				if(likeKey.equals(sqlRealProcessKey)){
					owfActivityPermissionMapper.updateVersion(owfActivityPermission.getId(), nowKey);
				}
			}
		}
	}

	public void deletePermissionWhenDeleteProcess(String likeId) {
		String like = "%"+likeId+"%";
		owfActivityPermissionMapper.deletePermissionWhenDeleteProcess(like);
		
	}
	//查找出某个用户某个节点是否有角色
	public List<OwfActivityPermission> getListByRoleLike(String roleLike, String userTaskDef,String pdefid) {
		String like = "%"+roleLike+"%";
		String pdeflike = "%"+pdefid.split("\\:")[0]+"%";
		return owfActivityPermissionMapper.getListByRoleLike(like,userTaskDef,pdeflike);
	}
	//用于用户任务节点定位
	public List<OwfActivityPermission> getListByRoleCodeLike(String roleLike,String pdefid) {
		String like = "%"+roleLike+"%";
		String pdeflike = "%"+pdefid.split("\\:")[0]+"%";
		return owfActivityPermissionMapper.getListByRoleCodeLike(like,pdeflike);
	}

}